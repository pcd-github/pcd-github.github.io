{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EndValueChart(props) {\n  _s();\n\n  const svgID = 'endvaluechartsvg';\n  const svgSelect = '#' + svgID;\n  const perRunClass = 'perrunevdata';\n  const histoBarClass = 'histobar';\n  const barGroupID = 'bargroup';\n  const margin = {\n    top: 40,\n    right: 65,\n    bottom: 40,\n    left: 65\n  };\n  const totalWidth = 960;\n  const totalHeight = 300;\n  const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n  const boundedWidth = totalWidth - margin.left - margin.right;\n  const boundedHeight = totalHeight - margin.top - margin.bottom;\n  const ttBinWrapID = 'ttevwrap';\n  const ttBinBackID = 'ttevback';\n  const ttBinRangeID = 'ttevrange';\n  const ttBinPctID = 'ttevpct';\n  const tooltipWidth = 75;\n  const tooltipHeight = 75;\n  const thresholdValues = [0, 0.25, 0.75, 1.25, 2, 5, 50];\n\n  const cleanupPrev = svg => {\n    const perRunSelect = '.' + perRunClass;\n    d3.selectAll(perRunSelect).remove();\n  };\n\n  const getXScaleForAxis = () => {\n    const numThresholds = thresholdValues.length;\n    var thresholdRange = [];\n    var thresholdInc = boundedWidth / (numThresholds + 1);\n\n    for (var i = 0; i <= thresholdValues.length; i++) {\n      thresholdRange[i] = i * thresholdInc;\n    }\n\n    return d3.scaleThreshold().domain(thresholdValues).range(thresholdRange);\n  };\n\n  const calcBinMetadata = data => {\n    const oneBinMetadata = {\n      'binData': data,\n      'extBin': d3.extent(data, d => d.adjEndCycleValue),\n      'extPctStartValue': d3.extent(data, d => d.pctOfStart),\n      'binCount': data.length\n    };\n    return oneBinMetadata;\n  };\n\n  const findRelativeValueExtents = (pctVal, bins) => {\n    var retValue = null;\n\n    for (var i = 0; i < bins.length; i++) {\n      var oneBin = bins[i];\n\n      if (pctVal >= oneBin.x0 && pctVal < oneBin.x1) {\n        retValue = [oneBin.x0, oneBin.x1];\n        break;\n      }\n    }\n\n    return retValue;\n  };\n\n  const drawReferenceRects = (bins, parent, xScaleBins) => {\n    const x = xScaleBins(1.0);\n    const width = xScaleBins(bins[0].x1) - xScaleBins(bins[0].x0);\n    parent.append('rect').attr('class', perRunClass).style('opacity', '0.1').attr('x', x).attr('y', 0).attr('width', width).attr('height', boundedHeight);\n  };\n\n  const drawHistogram = svg => {\n    const xScaleBins = getXScaleForAxis();\n    const binFunc = d3.bin().value(function (d) {\n      return d.pctOfStart;\n    }).domain([thresholdValues[0], thresholdValues[thresholdValues.length - 1]]).thresholds(thresholdValues);\n    const bins = binFunc(props.metadata);\n    const yScaleBins = d3.scaleLinear().domain([0, d3.max(bins, function (d) {\n      return d.length;\n    })]).range([boundedHeight, 0]);\n    svg.append(\"g\").attr(\"class\", perRunClass).attr(\"transform\", \"translate(0,\" + boundedHeight + \")\").call(d3.axisBottom(xScaleBins));\n    svg.append(\"g\").attr(\"class\", perRunClass).call(d3.axisLeft(yScaleBins)); // draw the histogram bars \n\n    var barGroup = svg.append('g').attr('class', perRunClass).attr('id', barGroupID); // draw the reference rects (startValue, reds/greens)\n\n    drawReferenceRects(bins, barGroup, xScaleBins);\n    var bars = barGroup.selectAll('.' + histoBarClass);\n    bars.data(bins).enter().append(\"rect\").attr(\"class\", perRunClass).attr(\"x\", 1).attr(\"transform\", function (d) {\n      return \"translate(\" + xScaleBins(d.x0) + \",\" + yScaleBins(d.length) + \")\";\n    }).attr(\"width\", function (d) {\n      return xScaleBins(d.x1) - xScaleBins(d.x0) - 1;\n    }).attr(\"height\", function (d) {\n      return boundedHeight - yScaleBins(d.length);\n    }).style(\"fill\", \"#69b3a2\").on(\"mouseover\", handleMouseOver).on(\"mouseout\", handleMouseLeave).on('mousemove', handleMouseMove);\n  };\n\n  const prepTooltip = svg => {\n    // wrapper\n    // background\n    // text element\n    //  tspan for each line\n    //  x0, x1, % of start, % of results\n    const tooltipWrapper = svg.append('g').attr('id', ttBinWrapID).attr(\"class\", perRunClass).style('opacity', 0);\n    tooltipWrapper.append('rect').style('opacity', 0.70).attr('id', ttBinBackID).attr('width', tooltipWidth).attr('height', tooltipHeight).attr(\"pointer-events\", \"none\").attr(\"fill\", \"#e8e8e8\");\n    const tooltipText = tooltipWrapper.append('g').append('text').attr(\"pointer-events\", \"none\").attr('font-weight', 900).attr('text-anchor', 'left');\n    tooltipText.append('tspan').attr('id', ttBinRangeID).attr('x', '5').attr('y', '5').attr('dy', '15px').attr(\"pointer-events\", \"none\");\n    tooltipText.append('tspan').attr('id', ttBinPctID).attr('x', '5').attr('y', '5').attr('dy', '30px').attr(\"pointer-events\", \"none\");\n  };\n\n  const makeCurrency = num => {\n    let dollarUSLocale = Intl.NumberFormat('en-US', {\n      style: \"currency\",\n      currency: \"USD\"\n    });\n    return dollarUSLocale.format(num);\n  };\n\n  const makePct = num => {\n    return Number(num * 100).toFixed(2) + '%';\n  };\n\n  const getTooltip = () => {\n    return d3.select('#' + ttBinWrapID);\n  };\n\n  const getTooltipBackground = () => {\n    return d3.select('#' + ttBinBackID);\n  };\n\n  const getBinRangeSpan = () => {\n    return d3.select('#' + ttBinRangeID);\n  };\n\n  const getBinPctSpan = () => {\n    return d3.select('#' + ttBinPctID);\n  };\n\n  const handleMouseOver = e => {\n    getTooltip().style('opacity', 1);\n  };\n\n  const handleMouseMove = e => {\n    const binData = e.srcElement.__data__;\n    const binMeta = calcBinMetadata(binData); // set the tt content\n\n    const tt = getTooltip();\n    const rangeString = makeCurrency(+binMeta.extBin[0]) + '-' + makeCurrency(+binMeta.extBin[1]);\n    const binSizeString = ' ' + makePct(binData.length / props.metadata.length) + ' of cycles';\n    getBinRangeSpan().text(rangeString);\n    getBinPctSpan().text(binSizeString); // place the tt\n\n    const ttBounds = tt.node().getBBox();\n    getTooltipBackground().attr('width', ttBounds.width).attr('height', ttBounds.height);\n  };\n\n  const handleMouseLeave = () => {\n    getTooltip().style('opacity', 0);\n  };\n\n  React.useEffect(() => {\n    const svg = d3.select(svgSelect).append(\"g\").attr(\"transform\", marginTranslate);\n    cleanupPrev(svg);\n    drawHistogram(svg);\n    prepTooltip(svg);\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: svgID,\n      width: totalWidth,\n      height: totalHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EndValueChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = EndValueChart;\n;\nexport default EndValueChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"EndValueChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js"],"names":["React","d3","EndValueChart","props","svgID","svgSelect","perRunClass","histoBarClass","barGroupID","margin","top","right","bottom","left","totalWidth","totalHeight","marginTranslate","boundedWidth","boundedHeight","ttBinWrapID","ttBinBackID","ttBinRangeID","ttBinPctID","tooltipWidth","tooltipHeight","thresholdValues","cleanupPrev","svg","perRunSelect","selectAll","remove","getXScaleForAxis","numThresholds","length","thresholdRange","thresholdInc","i","scaleThreshold","domain","range","calcBinMetadata","data","oneBinMetadata","extent","d","adjEndCycleValue","pctOfStart","findRelativeValueExtents","pctVal","bins","retValue","oneBin","x0","x1","drawReferenceRects","parent","xScaleBins","x","width","append","attr","style","drawHistogram","binFunc","bin","value","thresholds","metadata","yScaleBins","scaleLinear","max","call","axisBottom","axisLeft","barGroup","bars","enter","on","handleMouseOver","handleMouseLeave","handleMouseMove","prepTooltip","tooltipWrapper","tooltipText","makeCurrency","num","dollarUSLocale","Intl","NumberFormat","currency","format","makePct","Number","toFixed","getTooltip","select","getTooltipBackground","getBinRangeSpan","getBinPctSpan","e","binData","srcElement","__data__","binMeta","tt","rangeString","extBin","binSizeString","text","ttBounds","node","getBBox","height","useEffect"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as d3 from \"d3\";\n\nfunction EndValueChart (props) {\n\n    const svgID = 'endvaluechartsvg';\n    const svgSelect = '#' + svgID;\n    const perRunClass = 'perrunevdata';\n    const histoBarClass = 'histobar';\n    const barGroupID = 'bargroup';\n    const margin = { top: 40, right: 65, bottom: 40, left: 65 };\n    const totalWidth = 960;\n    const totalHeight = 300;\n    const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n    const boundedWidth = totalWidth - margin.left - margin.right;\n    const boundedHeight = totalHeight - margin.top - margin.bottom;\n    const ttBinWrapID = 'ttevwrap';\n    const ttBinBackID = 'ttevback';\n    const ttBinRangeID = 'ttevrange';\n    const ttBinPctID = 'ttevpct';\n    const tooltipWidth = 75;\n    const tooltipHeight = 75;\n    const thresholdValues = [0, 0.25, 0.75, 1.25, 2, 5, 50];\n\n    const cleanupPrev = (svg) => {\n        const perRunSelect = '.' + perRunClass;\n        d3.selectAll(perRunSelect).remove();\n    }\n\n    const getXScaleForAxis = () => {\n        const numThresholds = thresholdValues.length;\n        var thresholdRange = [];\n        var thresholdInc = boundedWidth / (numThresholds + 1);\n\n        for (var i = 0; i <= thresholdValues.length; i++) {\n            thresholdRange[i] = i * thresholdInc;\n        }\n\n        return d3.scaleThreshold()\n                 .domain(thresholdValues)\n                 .range(thresholdRange);\n    }\n\n    const calcBinMetadata = (data) => {\n        const oneBinMetadata = {\n            'binData': data,\n            'extBin': d3.extent(data, (d) => d.adjEndCycleValue),\n            'extPctStartValue': d3.extent(data, (d) => d.pctOfStart),\n            'binCount': data.length,\n        }\n\n        return oneBinMetadata;\n    }\n\n    const findRelativeValueExtents = (pctVal, bins) => {\n        var retValue = null;\n\n        for (var i = 0; i < bins.length; i++) {\n            var oneBin = bins[i];\n            if ((pctVal >= oneBin.x0) &&\n                (pctVal < oneBin.x1) ) {\n                retValue = [oneBin.x0, oneBin.x1];\n                break;\n            }\n        }\n\n        return retValue;\n    }\n\n    const drawReferenceRects = (bins, parent, xScaleBins) => {\n        const x = xScaleBins(1.0);\n        const width = ((xScaleBins(bins[0].x1) - xScaleBins(bins[0].x0)));\n        parent.append('rect')\n              .attr('class', perRunClass)\n              .style('opacity', '0.1')\n              .attr('x', x)\n              .attr('y', 0)\n              .attr('width', width)\n              .attr('height', boundedHeight);\n\n    }\n\n    const drawHistogram = (svg) => {\n\n        const xScaleBins = getXScaleForAxis();\n        const binFunc = d3.bin()\n                          .value(function(d) { return d.pctOfStart; })   \n                          .domain([thresholdValues[0], thresholdValues[thresholdValues.length - 1]])\n                          .thresholds(thresholdValues); \n        const bins = binFunc(props.metadata);\n        const yScaleBins = d3.scaleLinear()\n                             .domain([0, d3.max(bins, function(d) { return d.length; })])\n                             .range([boundedHeight, 0]);\n\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .attr(\"transform\", \"translate(0,\" + boundedHeight + \")\")\n            .call(d3.axisBottom(xScaleBins));\n        svg.append(\"g\")\n           .attr(\"class\", perRunClass)\n           .call(d3.axisLeft(yScaleBins));\n\n        // draw the histogram bars \n        var barGroup = svg.append('g')\n                          .attr('class', perRunClass)\n                          .attr('id', barGroupID);\n\n        // draw the reference rects (startValue, reds/greens)\n        drawReferenceRects(bins, barGroup, xScaleBins);\n\n        var bars = barGroup.selectAll('.' + histoBarClass);\n        bars.data(bins)\n           .enter()\n           .append(\"rect\")\n                .attr(\"class\", perRunClass)\n                .attr(\"x\", 1)\n                .attr(\"transform\", function(d) { return \"translate(\" + xScaleBins(d.x0) + \",\" + yScaleBins(d.length) + \")\"; })\n                .attr(\"width\", function(d) { return xScaleBins(d.x1) - xScaleBins(d.x0) -1 ; })\n                .attr(\"height\", function(d) { return boundedHeight - yScaleBins(d.length); })\n                .style(\"fill\", \"#69b3a2\")\n                .on(\"mouseover\", handleMouseOver)\n                .on(\"mouseout\", handleMouseLeave)                \n                .on('mousemove', handleMouseMove);\n    }\n\n    const prepTooltip = (svg) => {\n        // wrapper\n        // background\n        // text element\n        //  tspan for each line\n        //  x0, x1, % of start, % of results\n\n        const tooltipWrapper = svg.append('g')\n                                  .attr('id', ttBinWrapID)\n                                  .attr(\"class\", perRunClass)\n                                  .style('opacity', 0);\n        tooltipWrapper.append('rect')\n                      .style('opacity', 0.70)\n                      .attr('id', ttBinBackID)\n                      .attr('width', tooltipWidth)\n                      .attr('height', tooltipHeight)\n                      .attr(\"pointer-events\", \"none\")\n                      .attr(\"fill\", \"#e8e8e8\"); \n\n        const tooltipText = tooltipWrapper.append('g').append('text')\n                                          .attr(\"pointer-events\", \"none\")\n                                          .attr('font-weight', 900)\n                                          .attr('text-anchor', 'left');\n        tooltipText.append('tspan')\n                   .attr('id', ttBinRangeID)\n                   .attr('x', '5')\n                   .attr('y', '5')\n                   .attr('dy', '15px')\n                   .attr(\"pointer-events\", \"none\");\n        tooltipText.append('tspan')\n                   .attr('id', ttBinPctID)\n                   .attr('x', '5')\n                   .attr('y', '5')\n                   .attr('dy', '30px')\n                   .attr(\"pointer-events\", \"none\");\n    }\n\n    const makeCurrency = (num) => {\n        let dollarUSLocale = Intl.NumberFormat('en-US', {\n            style: \"currency\",\n            currency: \"USD\",\n        });\n        return dollarUSLocale.format(num);\n    }\n\n    const makePct = (num) => {\n        return Number( num * 100).toFixed(2) + '%';\n    }\n\n    const getTooltip = () => {\n        return d3.select('#' + ttBinWrapID);\n    }\n\n    const getTooltipBackground = () => {\n        return d3.select('#' + ttBinBackID);\n    }\n\n    const getBinRangeSpan = () => {\n        return d3.select('#' + ttBinRangeID);\n    }\n\n    const getBinPctSpan = () => {\n        return d3.select('#' + ttBinPctID);\n    }\n\n    const handleMouseOver = (e) => {\n        getTooltip().style('opacity', 1);\n    }\n\n    const handleMouseMove = (e) => {\n        const binData = e.srcElement.__data__;\n        const binMeta = calcBinMetadata(binData);\n        \n        // set the tt content\n        const tt = getTooltip();\n\n        const rangeString = makeCurrency(+(binMeta.extBin[0])) + \n                            '-' + makeCurrency(+(binMeta.extBin[1]));\n        const binSizeString = ' ' + makePct(binData.length / props.metadata.length) +\n                              ' of cycles';\n        getBinRangeSpan().text(rangeString);\n        getBinPctSpan().text(binSizeString);\n\n        // place the tt\n        const ttBounds = tt.node().getBBox();\n        getTooltipBackground()                \n            .attr('width', ttBounds.width)\n            .attr('height', ttBounds.height);\n    };\n    \n    const handleMouseLeave = () => {\n        getTooltip().style('opacity', 0);\n    };\n\n    React.useEffect(() => {\n\n        const svg = d3.select(svgSelect)\n                      .append(\"g\")\n                      .attr(\"transform\", marginTranslate);\n\n        cleanupPrev(svg);\n        drawHistogram(svg);\n        prepTooltip(svg);\n    }, [props] );\n\n    return (\n        <div>\n            <svg id={svgID}  \n                width={totalWidth}\n                height={totalHeight} \n             >\n            </svg>\n        </div>\n    );\n};\n\nexport default EndValueChart;\n"]},"metadata":{},"sourceType":"module"}