{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EndValueChart(props) {\n  _s();\n\n  const svgID = 'endvaluechartsvg';\n  const perRunClass = 'perrunevdata';\n  const ttBinWrapID = 'binttwrapper';\n  const ttBinBackID = 'binttback';\n  const ttBinRangeID = 'binrange';\n  const margin = {\n    top: 40,\n    right: 65,\n    bottom: 40,\n    left: 65\n  };\n  const totalWidth = 960;\n  const totalHeight = 300;\n  const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n  const boundedWidth = totalWidth - margin.left - margin.right;\n  const boundedHeight = totalHeight - margin.top - margin.bottom;\n  var tooltipDiv = null;\n  const ttDivID = 'ttdiv';\n  const ttColor = 'white';\n  const ttBackColor = 'black';\n  const tooltipWidth = 75;\n  const tooltipHeight = 75;\n  const thresholdValues = [0, 0.25, 0.5, 1, 3, 5, 10, 50];\n\n  const cleanupPrev = svg => {\n    const perRunSelect = '.' + perRunClass;\n    d3.selectAll(perRunSelect).remove();\n  };\n\n  const getXScaleForAxis = () => {\n    const numThresholds = thresholdValues.length;\n    var thresholdRange = [];\n    var thresholdInc = boundedWidth / (numThresholds + 1);\n\n    for (var i = 0; i <= thresholdValues.length; i++) {\n      thresholdRange[i] = i * thresholdInc;\n    }\n\n    return d3.scaleThreshold().domain(thresholdValues).range(thresholdRange);\n  };\n\n  const prepTooltip = svg => {\n    // wrapper\n    // background\n    // text element\n    //  tspan for each line\n    //  x0, x1, % of start, % of results\n    tooltipDiv = svg.append('div').attr('id', ttDivID).attr('color', ttColor).attr('background-color', ttBackColor).style(\"border-radius\", \"5px\").style(\"padding\", \"10px\").attr('text', 'yowsa');\n    /*\n    const tooltipWrapper = svg.append('g')\n                              .attr('id', ttBinWrapID)\n                              .attr('display', 'none');\n    tooltipWrapper.append('rect')\n                  .style('opacity', 0.70)\n                  .attr('id', ttBinBackID)\n                  .attr('width', tooltipWidth)\n                  .attr('height', tooltipHeight)\n                  .attr(\"pointer-events\", \"none\")\n                  .attr(\"fill\", \"#e8e8e8\"); \n    \n    const tooltipText = tooltipWrapper.append('g').append('text');\n    tooltipText.attr(\"pointer-events\", \"none\")\n               .attr('font-weight', 900)\n               .attr('text-anchor', 'left');          \n    tooltipText.append('tspan')\n               .attr('id', ttBinRangeID)\n               .attr('x', '5')\n               .attr('y', '5')\n               .attr('dy', '15px')\n               .attr(\"pointer-events\", \"none\");\n               */\n  };\n\n  const drawHistogram = svg => {\n    cleanupPrev(svg);\n    const xScaleBins = getXScaleForAxis();\n    const binFunc = d3.bin().value(function (d) {\n      return d.pctOfStart;\n    }).domain([thresholdValues[0], thresholdValues[thresholdValues.length - 1]]).thresholds(thresholdValues);\n    const bins = binFunc(props.metadata);\n    const yScaleBins = d3.scaleLinear().domain([0, d3.max(bins, function (d) {\n      return d.length;\n    })]).range([boundedHeight, 0]);\n    svg.append(\"g\").attr(\"class\", perRunClass).attr(\"transform\", \"translate(0,\" + boundedHeight + \")\").call(d3.axisBottom(xScaleBins));\n    svg.append(\"g\").attr(\"class\", perRunClass).call(d3.axisLeft(yScaleBins)); // draw the histogram bars \n\n    svg.selectAll(\"rect\").data(bins).enter().append(\"rect\").attr(\"class\", perRunClass).on('mousemove', handleMouseMove).attr(\"x\", 1).attr(\"transform\", function (d) {\n      return \"translate(\" + xScaleBins(d.x0) + \",\" + yScaleBins(d.length) + \")\";\n    }).attr(\"width\", function (d) {\n      return xScaleBins(d.x1) - xScaleBins(d.x0) - 1;\n    }).attr(\"height\", function (d) {\n      return boundedHeight - yScaleBins(d.length);\n    }).style(\"fill\", \"#69b3a2\");\n  };\n\n  const getTooltipWrapper = () => {\n    return d3.select('#' + ttBinWrapID);\n  };\n\n  const getTooltipBackground = () => {\n    return d3.select('#' + ttBinBackID);\n  };\n\n  const handleMouseOver = e => {\n    getTooltipWrapper().attr('display', null);\n  };\n\n  const handleMouseMove = e => {\n    console.log('move : ' + e.srcElement.__data__[0].adjEndCycleValue);\n    const bisect = d3.bisector(d => d.pctOfStart).left;\n    var xScaleBin = getXScaleForAxis();\n    const coords = d3.pointer(e);\n    const x0 = xScaleBin.invertExtent(coords[0]);\n    /*\n    const oneCycleData = allCycleDataState[0];\n    const i = bisect(oneCycleData, x0, 1);\n    const selectedData = oneCycleData[i];\n    const clientX = xScaleIn(selectedData.age);\n    var tooltipX = clientX;\n    \n    // prevent the tooltip from getting clipped.\n    const tooltipWidth = 75;             \n    if (boundedWidth <= (clientX + tooltipWidth)) {\n        tooltipX = clientX - tooltipWidth;\n    }\n    getTooltipAgeSpan().text('range: ' + selectedData.age);\n     const ttBounds = getTooltipWrapper().node().getBBox();\n    getTooltipBackground()                \n        .attr('width', ttBounds.width)\n        .attr('height', ttBounds.height);\n     getTooltipWrapper().attr(\"transform\", \"translate(\" + tooltipX + \",\" + coords[1] + \")\");  \n    getTooltipWrapper().attr('x', tooltipX);\n    */\n  };\n\n  const handleMouseLeave = () => {\n    getTooltipWrapper().attr('display', 'none');\n  };\n\n  React.useEffect(() => {\n    const svgSelect = '#' + svgID;\n    const svg = d3.select(svgSelect).append(\"g\").attr(\"transform\", marginTranslate);\n    prepTooltip(svg);\n    drawHistogram(svg); // console.log('endvaluechart effect');\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: svgID,\n      width: totalWidth,\n      height: totalHeight,\n      children: /*#__PURE__*/_jsxDEV(\"rect\", {\n        style: {\n          opacity: 0\n        },\n        width: boundedWidth,\n        height: boundedHeight,\n        transform: marginTranslate,\n        fill: \"LightGrey\",\n        onMouseEnter: handleMouseOver,\n        onMouseMove: handleMouseMove,\n        onMouseLeave: handleMouseLeave\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EndValueChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = EndValueChart;\n;\nexport default EndValueChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"EndValueChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js"],"names":["React","d3","EndValueChart","props","svgID","perRunClass","ttBinWrapID","ttBinBackID","ttBinRangeID","margin","top","right","bottom","left","totalWidth","totalHeight","marginTranslate","boundedWidth","boundedHeight","tooltipDiv","ttDivID","ttColor","ttBackColor","tooltipWidth","tooltipHeight","thresholdValues","cleanupPrev","svg","perRunSelect","selectAll","remove","getXScaleForAxis","numThresholds","length","thresholdRange","thresholdInc","i","scaleThreshold","domain","range","prepTooltip","append","attr","style","drawHistogram","xScaleBins","binFunc","bin","value","d","pctOfStart","thresholds","bins","metadata","yScaleBins","scaleLinear","max","call","axisBottom","axisLeft","data","enter","on","handleMouseMove","x0","x1","getTooltipWrapper","select","getTooltipBackground","handleMouseOver","e","console","log","srcElement","__data__","adjEndCycleValue","bisect","bisector","xScaleBin","coords","pointer","invertExtent","handleMouseLeave","useEffect","svgSelect","opacity"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as d3 from \"d3\";\n\nfunction EndValueChart (props) {\n\n    const svgID = 'endvaluechartsvg';\n    const perRunClass = 'perrunevdata';\n    const ttBinWrapID = 'binttwrapper';\n    const ttBinBackID = 'binttback';\n    const ttBinRangeID = 'binrange';\n    const margin = { top: 40, right: 65, bottom: 40, left: 65 };\n    const totalWidth = 960;\n    const totalHeight = 300;\n    const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n    const boundedWidth = totalWidth - margin.left - margin.right;\n    const boundedHeight = totalHeight - margin.top - margin.bottom;\n    var tooltipDiv = null;\n    const ttDivID = 'ttdiv';\n    const ttColor = 'white';\n    const ttBackColor = 'black';\n    const tooltipWidth = 75;\n    const tooltipHeight = 75;\n    const thresholdValues = [0, 0.25, 0.5, 1, 3, 5, 10, 50];\n\n    const cleanupPrev = (svg) => {\n        const perRunSelect = '.' + perRunClass;\n        d3.selectAll(perRunSelect).remove();\n    }\n\n    const getXScaleForAxis = () => {\n        const numThresholds = thresholdValues.length;\n        var thresholdRange = [];\n        var thresholdInc = boundedWidth / (numThresholds + 1);\n\n        for (var i = 0; i <= thresholdValues.length; i++) {\n            thresholdRange[i] = i * thresholdInc;\n        }\n\n        return d3.scaleThreshold()\n                 .domain(thresholdValues)\n                 .range(thresholdRange);\n    }\n\n    const prepTooltip = (svg) => {\n        // wrapper\n        // background\n        // text element\n        //  tspan for each line\n        //  x0, x1, % of start, % of results\n\n        tooltipDiv = svg.append('div')\n                        .attr('id', ttDivID)\n                        .attr('color', ttColor)\n                        .attr('background-color', ttBackColor)\n                        .style(\"border-radius\", \"5px\")\n                        .style(\"padding\", \"10px\")\n                        .attr('text', 'yowsa');\n        /*\n        const tooltipWrapper = svg.append('g')\n                                  .attr('id', ttBinWrapID)\n                                  .attr('display', 'none');\n        tooltipWrapper.append('rect')\n                      .style('opacity', 0.70)\n                      .attr('id', ttBinBackID)\n                      .attr('width', tooltipWidth)\n                      .attr('height', tooltipHeight)\n                      .attr(\"pointer-events\", \"none\")\n                      .attr(\"fill\", \"#e8e8e8\"); \n        \n        const tooltipText = tooltipWrapper.append('g').append('text');\n        tooltipText.attr(\"pointer-events\", \"none\")\n                   .attr('font-weight', 900)\n                   .attr('text-anchor', 'left');          \n        tooltipText.append('tspan')\n                   .attr('id', ttBinRangeID)\n                   .attr('x', '5')\n                   .attr('y', '5')\n                   .attr('dy', '15px')\n                   .attr(\"pointer-events\", \"none\");\n                   */\n}\n\n    const drawHistogram = (svg) => {\n        cleanupPrev(svg);\n\n        const xScaleBins = getXScaleForAxis();\n        const binFunc = d3.bin()\n                          .value(function(d) { return d.pctOfStart; })   \n                          .domain([thresholdValues[0], thresholdValues[thresholdValues.length - 1]])\n                          .thresholds(thresholdValues); \n        const bins = binFunc(props.metadata);\n        const yScaleBins = d3.scaleLinear()\n                             .domain([0, d3.max(bins, function(d) { return d.length; })])\n                             .range([boundedHeight, 0]);\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .attr(\"transform\", \"translate(0,\" + boundedHeight + \")\")\n            .call(d3.axisBottom(xScaleBins));\n        svg.append(\"g\")\n           .attr(\"class\", perRunClass)\n           .call(d3.axisLeft(yScaleBins));\n\n           // draw the histogram bars \n           svg.selectAll(\"rect\")\n              .data(bins)\n              .enter()\n              .append(\"rect\")\n                .attr(\"class\", perRunClass)\n                .on('mousemove', handleMouseMove)\n                .attr(\"x\", 1)\n                .attr(\"transform\", function(d) { return \"translate(\" + xScaleBins(d.x0) + \",\" + yScaleBins(d.length) + \")\"; })\n                .attr(\"width\", function(d) { return xScaleBins(d.x1) - xScaleBins(d.x0) -1 ; })\n                .attr(\"height\", function(d) { return boundedHeight - yScaleBins(d.length); })\n                .style(\"fill\", \"#69b3a2\");\n    }\n\n    const getTooltipWrapper = () => {\n        return d3.select('#' + ttBinWrapID);\n    }\n\n    const getTooltipBackground = () => {\n        return d3.select('#' + ttBinBackID);\n    }\n\n    const handleMouseOver = (e) => {\n        getTooltipWrapper().attr('display', null);\n    }\n\n    const handleMouseMove = (e) => {\n        console.log('move : ' + e.srcElement.__data__[0].adjEndCycleValue);\n        const bisect = d3.bisector((d) => d.pctOfStart).left;\n        var xScaleBin = getXScaleForAxis();\n        const coords = d3.pointer(e);\n        const x0 = xScaleBin.invertExtent(coords[0]);\n\n        /*\n        const oneCycleData = allCycleDataState[0];\n        const i = bisect(oneCycleData, x0, 1);\n        const selectedData = oneCycleData[i];\n        const clientX = xScaleIn(selectedData.age);\n        var tooltipX = clientX;\n        \n        // prevent the tooltip from getting clipped.\n        const tooltipWidth = 75;             \n        if (boundedWidth <= (clientX + tooltipWidth)) {\n            tooltipX = clientX - tooltipWidth;\n        }\n        getTooltipAgeSpan().text('range: ' + selectedData.age);\n\n        const ttBounds = getTooltipWrapper().node().getBBox();\n        getTooltipBackground()                \n            .attr('width', ttBounds.width)\n            .attr('height', ttBounds.height);\n\n        getTooltipWrapper().attr(\"transform\", \"translate(\" + tooltipX + \",\" + coords[1] + \")\");  \n        getTooltipWrapper().attr('x', tooltipX);\n        */\n    };\n    \n    const handleMouseLeave = () => {\n        getTooltipWrapper().attr('display', 'none');\n    };\n\n    React.useEffect(() => {\n\n        const svgSelect = '#' + svgID;\n        const svg = d3.select(svgSelect)\n                      .append(\"g\")\n                      .attr(\"transform\", marginTranslate);\n\n        prepTooltip(svg);\n        drawHistogram(svg);\n        // console.log('endvaluechart effect');\n    }, [props] );\n\n    return (\n        <div>\n            <svg id={svgID}  \n                width={totalWidth}\n                height={totalHeight} \n             >\n                <rect\n                    style={{ opacity:0 }}\n                    width={boundedWidth}\n                    height={boundedHeight}\n                    transform={marginTranslate}\n                    fill='LightGrey'\n                    onMouseEnter={handleMouseOver}\n                    onMouseMove={handleMouseMove}\n                    onMouseLeave={handleMouseLeave}\n                 >\n                </rect>\n            </svg>\n        </div>\n    );\n};\n\nexport default EndValueChart;\n"]},"metadata":{},"sourceType":"module"}