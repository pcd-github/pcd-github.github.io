{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport * as d3 from \"d3\";\nimport './common.js';\nimport { getPerRunClassName, getThresholdValues, getColorStringForRelativeValue, findByID, findByClass, getPortfolioLineClassName } from \"./common.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EndValueChart(props) {\n  _s();\n\n  const svgBinChartID = 'endvaluechartsvg';\n  const ttBinWrapID = 'ttevwrap';\n  const ttBinBackID = 'ttevback';\n  const ttBinRangeID = 'ttevrange';\n  const ttBinPctID = 'ttevpct';\n  const pathGroupID = 'pathgroupid';\n  const perRunClass = getPerRunClassName();\n  const margin = {\n    top: 40,\n    right: 65,\n    bottom: 40,\n    left: 65\n  };\n  const totalWidth = 960;\n  const totalHeight = 300;\n  const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n  const boundedWidth = totalWidth - margin.left - margin.right;\n  const boundedHeight = totalHeight - margin.top - margin.bottom;\n  const tooltipWidth = 75;\n  const tooltipHeight = 75;\n  var selectedBin = null;\n\n  const getXScaleForAxis = () => {\n    const thresholdValues = getCurrencyThresholds();\n    const numThresholds = thresholdValues.length;\n    var thresholdRange = [];\n    var thresholdInc = boundedWidth / (numThresholds + 1);\n\n    for (var i = 0; i <= thresholdValues.length; i++) {\n      thresholdRange[i] = i * thresholdInc;\n    }\n\n    return d3.scaleThreshold().domain(thresholdValues).range(thresholdRange);\n  };\n\n  const calcBinMetadata = data => {\n    const oneBinMetadata = {\n      'binData': data,\n      'extBin': d3.extent(data, d => d.adjEndCycleValue),\n      'extPctStartValue': d3.extent(data, d => d.pctOfStart),\n      'binCount': data.length\n    };\n    return oneBinMetadata;\n  };\n\n  const getCurrencyThresholds = () => {\n    const pctThresholds = getThresholdValues();\n    const currencyThresholds = []; // create failure bin\n\n    currencyThresholds[0] = 0;\n    currencyThresholds[1] = 0.01; // start at index 1, as we've handled the zero case.  \n    // Consider removing zero from the common thresholds.\n    // for now, offset the first entry in the currency array to accomodate the failure bin.\n\n    for (var i = 1; i < pctThresholds.length; i++) {\n      currencyThresholds[i + 1] = pctThresholds[i] * props.startvalue;\n    }\n\n    return currencyThresholds;\n  };\n\n  const createBins = currencyThresholdValues => {\n    const binFunc = d3.bin().value(function (d) {\n      return d.adjEndCycleValue;\n    }).domain([currencyThresholdValues[0], currencyThresholdValues[currencyThresholdValues.length - 1]]).thresholds(currencyThresholdValues);\n    return binFunc(props.metadata);\n  };\n\n  const drawHistogram = svg => {\n    const currencyThresholdValues = getCurrencyThresholds();\n    const bins = createBins(currencyThresholdValues);\n    const xScale = getXScaleForAxis(currencyThresholdValues);\n    const yScale = d3.scaleLinear().domain([0, d3.max(bins, function (d) {\n      return d.length;\n    })]).range([boundedHeight, 0]);\n    const histoBarClass = 'histobarclass'; // x/y axes\n\n    svg.append(\"g\").attr(\"class\", perRunClass).attr(\"transform\", \"translate(0,\" + boundedHeight + \")\").call(d3.axisBottom(xScale));\n    svg.append(\"g\").attr(\"class\", perRunClass).call(d3.axisLeft(yScale));\n    var barGroup = svg.append('g').attr('class', perRunClass).attr('id', pathGroupID); // chart\n\n    var bars = barGroup.selectAll('.' + histoBarClass);\n    bars.data(bins).enter().append(\"rect\").attr(\"class\", perRunClass).attr(\"x\", 1).attr(\"transform\", function (d) {\n      return \"translate(\" + xScale(d.x0) + \",\" + yScale(d.length) + \")\";\n    }).attr(\"width\", function (d) {\n      return xScale(d.x1) - xScale(d.x0) - 1;\n    }).attr(\"height\", function (d) {\n      return boundedHeight - yScale(d.length);\n    }).style(\"fill\", function (d) {\n      return getColorStringForRelativeValue(d.x0 / props.startvalue);\n    }).on('mousedown', handleMouseDown).on(\"mouseover\", handleMouseOver).on(\"mouseout\", handleMouseLeave).on('mousemove', handleMouseMove);\n  };\n\n  const prepTooltip = svg => {\n    // wrapper\n    // background\n    // text element\n    //  tspan for each line\n    //  x0, x1, % of start, % of results\n    const tooltipWrapper = svg.append('g').attr('id', ttBinWrapID).attr(\"class\", perRunClass).style('opacity', 0);\n    tooltipWrapper.append('rect').style('opacity', 0.70).attr('id', ttBinBackID).attr('width', tooltipWidth).attr('height', tooltipHeight).attr(\"pointer-events\", \"none\").attr(\"fill\", \"#e8e8e8\");\n    const tooltipText = tooltipWrapper.append('g').append('text').attr(\"pointer-events\", \"none\").attr('font-weight', 900).attr('text-anchor', 'left');\n    tooltipText.append('tspan').attr('id', ttBinRangeID).attr('x', '5').attr('y', '5').attr('dy', '15px').attr(\"pointer-events\", \"none\");\n    tooltipText.append('tspan').attr('id', ttBinPctID).attr('x', '5').attr('y', '5').attr('dy', '30px').attr(\"pointer-events\", \"none\");\n  };\n\n  const makeCurrency = num => {\n    let dollarUSLocale = Intl.NumberFormat('en-US', {\n      style: \"currency\",\n      currency: \"USD\"\n    });\n    return dollarUSLocale.format(num);\n  };\n\n  const makePct = num => {\n    return Number(num * 100).toFixed(2) + '%';\n  };\n\n  const getTooltip = () => {\n    return findByID(ttBinWrapID);\n  };\n\n  const getTooltipBackground = () => {\n    return findByID(ttBinBackID);\n  };\n\n  const getBinRangeSpan = () => {\n    return findByID(ttBinRangeID);\n  };\n\n  const getBinPctSpan = () => {\n    return findByID(ttBinPctID);\n  };\n\n  const isBinSelected = binID => {\n    return selectedBin === binID;\n  };\n\n  const selectBin = thisBin => {\n    const valueRatio = thisBin / props.startvalue;\n    const colorString = getColorStringForRelativeValue(valueRatio);\n    const cycleChart = findByID(props.cyclechartid);\n    findByClass(cycleChart, getPortfolioLineClassName()).style('opacity', '0.1');\n    findByClass(cycleChart, colorString).style('opacity', 1);\n    selectedBin = thisBin;\n  };\n\n  const unselectBin = thisBin => {\n    const cycleChart = findByID(props.cyclechartid);\n    findByClass(cycleChart, getPortfolioLineClassName()).style('opacity', 1);\n    selectedBin = null;\n  };\n\n  const handleMouseDown = e => {\n    const binData = e.srcElement.__data__;\n    const thisBin = binData.x0;\n\n    if (isBinSelected(thisBin)) {\n      selectBin(thisBin);\n    } else {\n      unselectBin(e.srcElement, thisBin);\n    }\n  };\n\n  const handleMouseOver = e => {\n    getTooltip().style('opacity', 1);\n  };\n\n  const handleMouseMove = e => {\n    const binData = e.srcElement.__data__;\n    const binMeta = calcBinMetadata(binData); // set the tt content\n\n    const rangeString = makeCurrency(+binMeta.extBin[0]) + '-' + makeCurrency(+binMeta.extBin[1]);\n    const binSizeString = ' ' + makePct(binData.length / props.metadata.length) + ' of cycles';\n    getBinRangeSpan().text(rangeString);\n    getBinPctSpan().text(binSizeString); // place the tt\n\n    const tt = getTooltip();\n    const ttBounds = tt.node().getBBox();\n    getTooltipBackground().attr('width', ttBounds.width).attr('height', ttBounds.height); // const mouseTranslate = 'translate(' + coords[0] + ',' + (coords[1] - ttBounds.height) + ')';\n    // tt.attr('transform', mouseTranslate);\n  };\n\n  const handleMouseLeave = () => {\n    getTooltip().style('opacity', 0);\n  };\n\n  React.useEffect(() => {\n    const svg = findByID(svgBinChartID).append(\"g\").attr(\"transform\", marginTranslate);\n    drawHistogram(svg);\n    prepTooltip(svg);\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: svgBinChartID,\n      width: totalWidth,\n      height: totalHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EndValueChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = EndValueChart;\n;\nexport default EndValueChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"EndValueChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js"],"names":["React","useState","d3","getPerRunClassName","getThresholdValues","getColorStringForRelativeValue","findByID","findByClass","getPortfolioLineClassName","EndValueChart","props","svgBinChartID","ttBinWrapID","ttBinBackID","ttBinRangeID","ttBinPctID","pathGroupID","perRunClass","margin","top","right","bottom","left","totalWidth","totalHeight","marginTranslate","boundedWidth","boundedHeight","tooltipWidth","tooltipHeight","selectedBin","getXScaleForAxis","thresholdValues","getCurrencyThresholds","numThresholds","length","thresholdRange","thresholdInc","i","scaleThreshold","domain","range","calcBinMetadata","data","oneBinMetadata","extent","d","adjEndCycleValue","pctOfStart","pctThresholds","currencyThresholds","startvalue","createBins","currencyThresholdValues","binFunc","bin","value","thresholds","metadata","drawHistogram","svg","bins","xScale","yScale","scaleLinear","max","histoBarClass","append","attr","call","axisBottom","axisLeft","barGroup","bars","selectAll","enter","x0","x1","style","on","handleMouseDown","handleMouseOver","handleMouseLeave","handleMouseMove","prepTooltip","tooltipWrapper","tooltipText","makeCurrency","num","dollarUSLocale","Intl","NumberFormat","currency","format","makePct","Number","toFixed","getTooltip","getTooltipBackground","getBinRangeSpan","getBinPctSpan","isBinSelected","binID","selectBin","thisBin","valueRatio","colorString","cycleChart","cyclechartid","unselectBin","e","binData","srcElement","__data__","binMeta","rangeString","extBin","binSizeString","text","tt","ttBounds","node","getBBox","width","height","useEffect"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useState } from \"react\";\nimport * as d3 from \"d3\";\nimport './common.js';\nimport { getPerRunClassName, getThresholdValues, getColorStringForRelativeValue, findByID, findByClass, getPortfolioLineClassName} from \"./common.js\";\n\nfunction EndValueChart (props) {\n\n    const svgBinChartID = 'endvaluechartsvg';\n    const ttBinWrapID = 'ttevwrap';\n    const ttBinBackID = 'ttevback';\n    const ttBinRangeID = 'ttevrange';\n    const ttBinPctID = 'ttevpct';\n    const pathGroupID = 'pathgroupid';\n    const perRunClass = getPerRunClassName();\n    const margin = { top: 40, right: 65, bottom: 40, left: 65 };\n    const totalWidth = 960;\n    const totalHeight = 300;\n    const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n    const boundedWidth = totalWidth - margin.left - margin.right;\n    const boundedHeight = totalHeight - margin.top - margin.bottom;\n    const tooltipWidth = 75;\n    const tooltipHeight = 75;\n    var selectedBin = null;\n\n    const getXScaleForAxis = () => {\n        const thresholdValues = getCurrencyThresholds();\n        const numThresholds = thresholdValues.length;\n        var thresholdRange = [];\n        var thresholdInc = boundedWidth / (numThresholds + 1);\n\n        for (var i = 0; i <= thresholdValues.length; i++) {\n            thresholdRange[i] = i * thresholdInc;\n        }\n\n        return d3.scaleThreshold()\n                 .domain(thresholdValues)\n                 .range(thresholdRange);\n    }\n\n    const calcBinMetadata = (data) => {\n        const oneBinMetadata = {\n            'binData': data,\n            'extBin': d3.extent(data, (d) => d.adjEndCycleValue),\n            'extPctStartValue': d3.extent(data, (d) => d.pctOfStart),\n            'binCount': data.length,\n        }\n\n        return oneBinMetadata;\n    }\n\n    const getCurrencyThresholds = () => {\n        const pctThresholds = getThresholdValues();\n        const currencyThresholds = [];\n\n        // create failure bin\n        currencyThresholds[0] = 0;\n        currencyThresholds[1] = 0.01;\n        // start at index 1, as we've handled the zero case.  \n        // Consider removing zero from the common thresholds.\n        // for now, offset the first entry in the currency array to accomodate the failure bin.\n        for (var i = 1; i < pctThresholds.length; i++) {\n            currencyThresholds[i+1] = pctThresholds[i] * props.startvalue;\n        }\n        return currencyThresholds;\n    }\n\n    const createBins = (currencyThresholdValues) => {\n\n        const binFunc = d3.bin()\n                          .value(function(d) { return d.adjEndCycleValue; })   \n                          .domain([currencyThresholdValues[0], \n                                   currencyThresholdValues[currencyThresholdValues.length - 1]])\n                          .thresholds(currencyThresholdValues); \n\n        return binFunc(props.metadata);\n    }\n\n    const drawHistogram = (svg) => {\n        const currencyThresholdValues = getCurrencyThresholds();\n        const bins = createBins(currencyThresholdValues);        \n        const xScale = getXScaleForAxis(currencyThresholdValues);\n        const yScale = d3.scaleLinear()\n                         .domain([0, d3.max(bins, function(d) { return d.length; })])\n                         .range([boundedHeight, 0]);\n        const histoBarClass = 'histobarclass';\n\n        // x/y axes\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .attr(\"transform\", \"translate(0,\" + boundedHeight + \")\")\n            .call(d3.axisBottom(xScale));\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .call(d3.axisLeft(yScale));\n             \n        var barGroup = svg.append('g')\n                          .attr('class', perRunClass)\n                          .attr('id', pathGroupID);\n\n        // chart\n        var bars = barGroup.selectAll('.' + histoBarClass);\n        bars.data(bins)\n                .enter()\n                .append(\"rect\")\n                .attr(\"class\", perRunClass)\n                .attr(\"x\", 1)\n                .attr(\"transform\", function(d) { return \"translate(\" + xScale(d.x0) + \",\" + yScale(d.length) + \")\"; })\n                .attr(\"width\", function(d) { return xScale(d.x1) - xScale(d.x0) -1 ; })\n                .attr(\"height\", function(d) { return boundedHeight - yScale(d.length); })\n                .style(\"fill\",  function(d) { return getColorStringForRelativeValue(d.x0 / props.startvalue);})\n                .on('mousedown', handleMouseDown)\n                .on(\"mouseover\", handleMouseOver)\n                .on(\"mouseout\", handleMouseLeave)                \n                .on('mousemove', handleMouseMove);\n    }\n\n    const prepTooltip = (svg) => {\n        // wrapper\n        // background\n        // text element\n        //  tspan for each line\n        //  x0, x1, % of start, % of results\n\n        const tooltipWrapper = svg.append('g')\n                                  .attr('id', ttBinWrapID)\n                                  .attr(\"class\", perRunClass)\n                                  .style('opacity', 0);\n        tooltipWrapper.append('rect')\n                      .style('opacity', 0.70)\n                      .attr('id', ttBinBackID)\n                      .attr('width', tooltipWidth)\n                      .attr('height', tooltipHeight)\n                      .attr(\"pointer-events\", \"none\")\n                      .attr(\"fill\", \"#e8e8e8\"); \n\n        const tooltipText = tooltipWrapper.append('g').append('text')\n                                          .attr(\"pointer-events\", \"none\")\n                                          .attr('font-weight', 900)\n                                          .attr('text-anchor', 'left');\n        tooltipText.append('tspan')\n                   .attr('id', ttBinRangeID)\n                   .attr('x', '5')\n                   .attr('y', '5')\n                   .attr('dy', '15px')\n                   .attr(\"pointer-events\", \"none\");\n        tooltipText.append('tspan')\n                   .attr('id', ttBinPctID)\n                   .attr('x', '5')\n                   .attr('y', '5')\n                   .attr('dy', '30px')\n                   .attr(\"pointer-events\", \"none\");\n    }\n\n    const makeCurrency = (num) => {\n        let dollarUSLocale = Intl.NumberFormat('en-US', {\n            style: \"currency\",\n            currency: \"USD\",\n        });\n        return dollarUSLocale.format(num);\n    }\n\n    const makePct = (num) => {\n        return Number( num * 100).toFixed(2) + '%';\n    }\n\n    const getTooltip = () => {\n        return findByID(ttBinWrapID);\n    }\n\n    const getTooltipBackground = () => {\n        return findByID(ttBinBackID);\n    }\n\n    const getBinRangeSpan = () => {\n        return findByID(ttBinRangeID);\n    }\n\n    const getBinPctSpan = () => {\n        return findByID(ttBinPctID);\n    }\n\n    const isBinSelected = (binID) => {\n        return (selectedBin === binID);\n    }\n\n    const selectBin = (thisBin) => {\n        const valueRatio = thisBin / props.startvalue;\n        const colorString = getColorStringForRelativeValue(valueRatio);\n        const cycleChart = findByID(props.cyclechartid);\n        findByClass(cycleChart, getPortfolioLineClassName()).style('opacity', '0.1');\n        findByClass(cycleChart, colorString).style('opacity', 1);\n        selectedBin = thisBin;\n    }\n\n    const unselectBin = (thisBin) => {\n        const cycleChart = findByID(props.cyclechartid);\n        findByClass(cycleChart, getPortfolioLineClassName()).style('opacity', 1);\n        selectedBin = null;\n    }\n\n    const handleMouseDown = (e) => {\n        const binData = e.srcElement.__data__;\n        const thisBin = binData.x0;\n\n        if (isBinSelected(thisBin)) {\n            selectBin(thisBin);\n        }\n        else {\n            unselectBin(e.srcElement, thisBin);\n        }\n    }\n\n    const handleMouseOver = (e) => {\n        getTooltip().style('opacity', 1);\n    }\n\n    const handleMouseMove = (e) => {\n\n        const binData = e.srcElement.__data__;\n        const binMeta = calcBinMetadata(binData);\n        \n        // set the tt content\n        const rangeString = makeCurrency(+(binMeta.extBin[0])) + \n                            '-' + makeCurrency(+(binMeta.extBin[1]));\n        const binSizeString = ' ' + makePct(binData.length / props.metadata.length) +\n                              ' of cycles';\n        getBinRangeSpan().text(rangeString);\n        getBinPctSpan().text(binSizeString);\n\n        // place the tt\n        const tt = getTooltip();\n        const ttBounds = tt.node().getBBox();\n        getTooltipBackground()                \n            .attr('width', ttBounds.width)\n            .attr('height', ttBounds.height);\n        // const mouseTranslate = 'translate(' + coords[0] + ',' + (coords[1] - ttBounds.height) + ')';\n        // tt.attr('transform', mouseTranslate);\n    };\n    \n    const handleMouseLeave = () => {\n        getTooltip().style('opacity', 0);\n    };\n\n    React.useEffect(() => {\n\n        const svg = findByID(svgBinChartID)\n                      .append(\"g\")\n                      .attr(\"transform\", marginTranslate);\n\n        drawHistogram(svg);\n        prepTooltip(svg);\n    }, [props] );\n\n    return (\n        <div>\n            <svg id={svgBinChartID}  \n                width={totalWidth}\n                height={totalHeight} \n             >\n            </svg>\n        </div>\n    );\n};\n\nexport default EndValueChart;\n"]},"metadata":{},"sourceType":"module"}