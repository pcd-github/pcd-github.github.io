{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/react-sample/resample/src/historical_data.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport XLSX from 'xlsx';\nimport { readFile } from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AnnualReturnData {\n  constructor(year, inflation_pct, stock_pct, bond_pct) {\n    this._year = year;\n    this._inf = inflation_pct;\n    this._stock = stock_pct;\n    this._bond = bond_pct;\n  }\n\n}\n\nconst histFile = \"./data/hist-returns.xlsx\";\nconst annualreturns = [];\n\nfunction HistoricalData() {\n  _s();\n\n  const [data, setData] = React.useState([]);\n  const [cols, setCols] = React.useState([]);\n\n  const handleFile = file => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      /* Parse data */\n      // const ab = e.target.result;\n      const wb = XLSX.read(histFile, {\n        type: 'array'\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      setData(data);\n      setCols(make_cols(ws['!ref']));\n    };\n\n    reader.readAsArrayBuffer(file);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onchange: \"handleFile()\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: handleFile,\n          children: \"import\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(OutTable, {\n          data: data,\n          cols: cols\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 13\n  }, this);\n}\n\n_s(HistoricalData, \"mX9nkHc5f33NmLj9fZHZvwQpJl8=\");\n\n_c = HistoricalData;\nexport default HistoricalData; // demo code from \n// https://github.com/SheetJS/sheetjs/blob/master/demos/react/sheetjs.js\n\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\n\nfunction OutTable({\n  data,\n  cols\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-responsive\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: cols.map(c => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: c.name\n          }, c.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 27\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((r, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: cols.map(c => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: r[c.key]\n          }, c.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 22\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this);\n}\n/* generate an array of column objects */\n\n\n_c2 = OutTable;\n\nconst make_cols = refstr => {\n  let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) o[i] = {\n    name: XLSX.utils.encode_col(i),\n    key: i\n  };\n\n  return o;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HistoricalData\");\n$RefreshReg$(_c2, \"OutTable\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/react-sample/resample/src/historical_data.js"],"names":["React","XLSX","readFile","AnnualReturnData","constructor","year","inflation_pct","stock_pct","bond_pct","_year","_inf","_stock","_bond","histFile","annualreturns","HistoricalData","data","setData","useState","cols","setCols","handleFile","file","reader","FileReader","onload","e","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","make_cols","readAsArrayBuffer","OutTable","map","c","name","key","r","i","refstr","o","C","decode_range","encode_col"],"mappings":"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","sourcesContent":["\nimport * as React from \"react\";\nimport XLSX from 'xlsx';\nimport { readFile } from 'xlsx';\n\nclass AnnualReturnData {\n\n    constructor (year, inflation_pct, stock_pct, bond_pct) {\n        this._year = year;\n        this._inf = inflation_pct;\n        this._stock = stock_pct;\n        this._bond = bond_pct;\n    }\n}\n\nconst histFile = \"./data/hist-returns.xlsx\";\nconst annualreturns = [];\n\nfunction HistoricalData () {\n\n    const [data, setData] = React.useState([]);\n    const [cols, setCols] = React.useState([]);\n\n    const handleFile = (file) => {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            /* Parse data */\n            // const ab = e.target.result;\n            const wb = XLSX.read(histFile, {type:'array'});\n            /* Get first worksheet */\n            const wsname = wb.SheetNames[0];\n            const ws = wb.Sheets[wsname];\n            /* Convert array of arrays */\n            const data = XLSX.utils.sheet_to_json(ws, {header:1});\n            /* Update state */\n            setData(data);\n            setCols(make_cols(ws['!ref']))\n        };\n        reader.readAsArrayBuffer(file);\n    }\n\n    return (\n            <div>\n                <div className=\"row\"><div className=\"col-xs-12\">\n                    <input type=\"file\" onchange=\"handleFile()\"/>\n                    <button className=\"btn btn-success\" onClick={handleFile}>import</button>\n                </div></div>\n                <div className=\"row\"><div className=\"col-xs-12\">\n                    <OutTable data={data} cols={cols} />\n                </div></div>\n            </div>\n        );\n\n}\n\nexport default HistoricalData;\n\n// demo code from \n// https://github.com/SheetJS/sheetjs/blob/master/demos/react/sheetjs.js\n\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\nfunction OutTable({ data, cols }) {\n\treturn (\n\t\t<div className=\"table-responsive\">\n\t\t\t<table className=\"table table-striped\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>{cols.map((c) => <th key={c.key}>{c.name}</th>)}</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{data.map((r,i) => <tr key={i}>\n\t\t\t\t\t\t{cols.map(c => <td key={c.key}>{ r[c.key] }</td>)}\n\t\t\t\t\t</tr>)}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\n/* generate an array of column objects */\nconst make_cols = refstr => {\n\tlet o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\n\tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\n\treturn o;\n};"]},"metadata":{},"sourceType":"module"}