{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EndValueChart(props) {\n  _s();\n\n  const maxPctOfStartState = props.maxendvalue / props.startvalue;\n  const svgID = 'endvaluechartsvg';\n  const perRunClass = 'perrunevdata';\n  const ttBinWrapID = 'binttwrapper';\n  const ttBinBackID = 'binttback';\n  const ttBinRangeID = 'binrange';\n  const margin = {\n    top: 40,\n    right: 65,\n    bottom: 40,\n    left: 65\n  };\n  const totalWidth = 960;\n  const totalHeight = 300;\n  const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n  const boundedWidth = totalWidth - margin.left - margin.right;\n  const boundedHeight = totalHeight - margin.top - margin.bottom;\n  const thresholdValues = [0, 0.25, 0.5, 1, 3, 5, 10, 50];\n\n  const cleanupPrev = svg => {\n    const perRunSelect = '.' + perRunClass;\n    d3.selectAll(perRunSelect).remove();\n  };\n\n  const prepTooltip = svg => {\n    // wrapper\n    // background\n    // text element\n    //  tspan for each line\n    //  x0, x1, % of start, % of results\n    const tooltipWrapper = svg.append('g').attr('id', ttBinWrapID).attr('display', 'none');\n    tooltipWrapper.append('rect').style('opacity', 0.70).attr('id', ttBinBackID).attr('width', tooltipWidth).attr('height', tooltipHeight).attr(\"pointer-events\", \"none\").attr(\"fill\", \"#e8e8e8\");\n    const tooltipText = tooltipWrapper.append('g').append('text');\n    tooltipText.attr(\"pointer-events\", \"none\").attr('font-weight', 900).attr('text-anchor', 'left');\n    tooltipText.append('tspan').attr('id', ttBinRangeID).attr('x', '5').attr('y', '5').attr('dy', '15px').attr(\"pointer-events\", \"none\");\n  };\n\n  const drawHistogram = svg => {\n    cleanupPrev(svg);\n    const numThresholds = thresholdValues.length;\n    var thresholdRange = [];\n    var thresholdInc = boundedWidth / (numThresholds + 1);\n\n    for (var i = 0; i <= thresholdValues.length; i++) {\n      thresholdRange[i] = i * thresholdInc;\n    }\n\n    const xScaleBins = d3.scaleThreshold().domain(thresholdValues).range(thresholdRange);\n    const binFunc = d3.bin().value(function (d) {\n      return d.pctOfStart;\n    }).domain([thresholdValues[0], thresholdValues[thresholdValues.length - 1]]).thresholds(thresholdValues);\n    const bins = binFunc(props.metadata);\n    const yScaleBins = d3.scaleLinear().range([boundedHeight, 0]);\n    yScaleBins.domain([0, d3.max(bins, function (d) {\n      return d.length;\n    })]);\n    svg.append(\"g\").attr(\"class\", perRunClass).attr(\"transform\", \"translate(0,\" + boundedHeight + \")\").call(d3.axisBottom(xScaleBins));\n    svg.append(\"g\").attr(\"class\", perRunClass).call(d3.axisLeft(yScaleBins)); // draw the histogram bars \n\n    svg.selectAll(\"rect\").data(bins).enter().append(\"rect\").attr(\"class\", perRunClass).attr(\"x\", 1).attr(\"transform\", function (d) {\n      return \"translate(\" + xScaleBins(d.x0) + \",\" + yScaleBins(d.length) + \")\";\n    }).attr(\"width\", function (d) {\n      return xScaleBins(d.x1) - xScaleBins(d.x0) - 1;\n    }).attr(\"height\", function (d) {\n      return boundedHeight - yScaleBins(d.length);\n    }).style(\"fill\", \"#69b3a2\");\n  };\n\n  React.useEffect(() => {\n    const svgSelect = '#' + svgID;\n    const svg = d3.select(svgSelect).append(\"g\").attr(\"transform\", marginTranslate);\n    drawHistogram(svg); // console.log('endvaluechart effect');\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: svgID,\n      width: totalWidth,\n      height: totalHeight,\n      children: /*#__PURE__*/_jsxDEV(\"rect\", {\n        style: {\n          opacity: 0\n        },\n        width: boundedWidth,\n        height: boundedHeight,\n        transform: marginTranslate,\n        fill: \"LightGrey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EndValueChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = EndValueChart;\n;\nexport default EndValueChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"EndValueChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js"],"names":["React","d3","useState","EndValueChart","props","maxPctOfStartState","maxendvalue","startvalue","svgID","perRunClass","ttBinWrapID","ttBinBackID","ttBinRangeID","margin","top","right","bottom","left","totalWidth","totalHeight","marginTranslate","boundedWidth","boundedHeight","thresholdValues","cleanupPrev","svg","perRunSelect","selectAll","remove","prepTooltip","tooltipWrapper","append","attr","style","tooltipWidth","tooltipHeight","tooltipText","drawHistogram","numThresholds","length","thresholdRange","thresholdInc","i","xScaleBins","scaleThreshold","domain","range","binFunc","bin","value","d","pctOfStart","thresholds","bins","metadata","yScaleBins","scaleLinear","max","call","axisBottom","axisLeft","data","enter","x0","x1","useEffect","svgSelect","select","opacity"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as d3 from \"d3\";\nimport {useState} from \"react\";\n\nfunction EndValueChart (props) {\n\n    const maxPctOfStartState = props.maxendvalue / props.startvalue;\n    const svgID = 'endvaluechartsvg';\n    const perRunClass = 'perrunevdata';\n    const ttBinWrapID = 'binttwrapper';\n    const ttBinBackID = 'binttback';\n    const ttBinRangeID = 'binrange';\n    const margin = { top: 40, right: 65, bottom: 40, left: 65 };\n    const totalWidth = 960;\n    const totalHeight = 300;\n    const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n    const boundedWidth = totalWidth - margin.left - margin.right;\n    const boundedHeight = totalHeight - margin.top - margin.bottom;\n    const thresholdValues = [0, 0.25, 0.5, 1, 3, 5, 10, 50];\n\n    const cleanupPrev = (svg) => {\n        const perRunSelect = '.' + perRunClass;\n        d3.selectAll(perRunSelect).remove();\n    }\n\n    const prepTooltip = (svg) => {\n        // wrapper\n        // background\n        // text element\n        //  tspan for each line\n        //  x0, x1, % of start, % of results\n        const tooltipWrapper = svg.append('g')\n                                  .attr('id', ttBinWrapID)\n                                  .attr('display', 'none');\n        tooltipWrapper.append('rect')\n                      .style('opacity', 0.70)\n                      .attr('id', ttBinBackID)\n                      .attr('width', tooltipWidth)\n                      .attr('height', tooltipHeight)\n                      .attr(\"pointer-events\", \"none\")\n                      .attr(\"fill\", \"#e8e8e8\"); \n        \n        const tooltipText = tooltipWrapper.append('g').append('text');\n        tooltipText.attr(\"pointer-events\", \"none\")\n                   .attr('font-weight', 900)\n                   .attr('text-anchor', 'left');          \n        tooltipText.append('tspan')\n                   .attr('id', ttBinRangeID)\n                   .attr('x', '5')\n                   .attr('y', '5')\n                   .attr('dy', '15px')\n                   .attr(\"pointer-events\", \"none\");\n}\n\n    const drawHistogram = (svg) => {\n        \n        cleanupPrev(svg);\n        const numThresholds = thresholdValues.length;\n        var thresholdRange = [];\n        var thresholdInc = boundedWidth / (numThresholds + 1);\n\n        for (var i = 0; i <= thresholdValues.length; i++) {\n            thresholdRange[i] = i * thresholdInc;\n        }\n\n        const xScaleBins = d3.scaleThreshold()\n                             .domain(thresholdValues)\n                             .range(thresholdRange);\n        const binFunc = d3.bin()\n                          .value(function(d) { return d.pctOfStart; })   \n                          .domain([thresholdValues[0], thresholdValues[thresholdValues.length - 1]])\n                          .thresholds(thresholdValues); \n        const bins = binFunc(props.metadata);\n        const yScaleBins = d3.scaleLinear()\n                             .range([boundedHeight, 0]);\n        yScaleBins.domain([0, d3.max(bins, function(d) { return d.length; })]);\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .attr(\"transform\", \"translate(0,\" + boundedHeight + \")\")\n            .call(d3.axisBottom(xScaleBins));\n        svg.append(\"g\")\n           .attr(\"class\", perRunClass)\n           .call(d3.axisLeft(yScaleBins));\n\n           // draw the histogram bars \n           svg.selectAll(\"rect\")\n              .data(bins)\n              .enter()\n              .append(\"rect\")\n                .attr(\"class\", perRunClass)\n                .attr(\"x\", 1)\n                .attr(\"transform\", function(d) { return \"translate(\" + xScaleBins(d.x0) + \",\" + yScaleBins(d.length) + \")\"; })\n                .attr(\"width\", function(d) { return xScaleBins(d.x1) - xScaleBins(d.x0) -1 ; })\n                .attr(\"height\", function(d) { return boundedHeight - yScaleBins(d.length); })\n                .style(\"fill\", \"#69b3a2\");\n    }\n\n    React.useEffect(() => {\n\n        const svgSelect = '#' + svgID;\n        const svg = d3.select(svgSelect)\n                      .append(\"g\")\n                      .attr(\"transform\", marginTranslate);\n\n        drawHistogram(svg);\n        // console.log('endvaluechart effect');\n    }, [props] );\n\n    return (\n        <div>\n            <svg id={svgID}  \n                width={totalWidth}\n                height={totalHeight} \n             >\n                <rect\n                    style={{ opacity:0 }}\n                    width={boundedWidth}\n                    height={boundedHeight}\n                    transform={marginTranslate}\n                    fill='LightGrey'\n                 >\n\n                </rect>\n            </svg>\n        </div>\n    );\n};\n\nexport default EndValueChart;\n"]},"metadata":{},"sourceType":"module"}