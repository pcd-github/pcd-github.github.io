{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EndValueChart(props) {\n  _s();\n\n  const svgID = 'endvaluechartsvg';\n  const perRunClass = 'perrundata';\n  const margin = {\n    top: 40,\n    right: 65,\n    bottom: 40,\n    left: 65\n  };\n  const totalWidth = 960;\n  const totalHeight = 300;\n  const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n  const boundedWidth = totalWidth - margin.left - margin.right;\n  const boundedHeight = totalHeight - margin.top - margin.bottom;\n\n  const getXScale = () => {\n    var xExt = [props.minendvalue, props.maxendvalue];\n    return d3.scaleLinear().domain(xExt).range([0, boundedWidth]);\n  };\n\n  const getYScale = (rangeMin, rangeMax) => {\n    var yExt = [rangeMin, rangeMax];\n    return d3.scaleLinear().domain(yExt).range([boundedHeight, 0]);\n  };\n\n  const drawAxes = (svg, xScaleIn, yScaleIn, rangeMin, rangeMax) => {\n    svg.append(\"g\").attr(\"class\", perRunClass).attr(\"transform\", \"translate(0,\" + boundedHeight + \")\").call(d3.axisBottom(xScaleIn));\n    svg.append(\"g\").attr(\"class\", perRunClass).call(d3.axisLeft(yScaleIn));\n  };\n\n  const drawHistogram = (svg, xScale) => {\n    // set the parameters for the histogram\n    var binFunc = d3.bin().value(function (d) {\n      return d.adjEndCycleValue;\n    }) // I need to give the vector of value\n    .domain(xScale.domain()) // then the domain of the graphic\n    .thresholds(xScale.ticks(10)); // then the numbers of bins\n\n    var bins = binFunc(props.metadata);\n    var yScaleBins = d3.scaleLinear().range([height, 0]);\n    yScaleBins.domain([0, d3.max(bins, function (d) {\n      return d.length;\n    })]); // d3.hist has to be called before the Y axis obviously\n\n    svg.append(\"g\").attr(\"class\", perRunClass).attr(\"transform\", \"translate(0,\" + boundedHeight + \")\").call(d3.axisBottom(xScaleIn));\n    svg.append(\"g\").attr(\"class\", perRunClass).call(d3.axisLeft(yScaleBins));\n  };\n\n  React.useEffect(() => {\n    const svgSelect = '#' + svgID;\n    const svg = d3.select(svgSelect).append(\"g\").attr(\"transform\", marginTranslate);\n    const xScale = getXScale();\n    const yScale = getYScale(0, 100);\n    drawAxes(svg, xScale, yScale, 0, 100); // console.log('endvaluechart effect');\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: svgID,\n      width: totalWidth,\n      height: totalHeight,\n      children: /*#__PURE__*/_jsxDEV(\"rect\", {\n        width: boundedWidth,\n        height: boundedHeight,\n        transform: marginTranslate,\n        fill: \"LightGrey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EndValueChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = EndValueChart;\n;\nexport default EndValueChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"EndValueChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js"],"names":["React","d3","useState","EndValueChart","props","svgID","perRunClass","margin","top","right","bottom","left","totalWidth","totalHeight","marginTranslate","boundedWidth","boundedHeight","getXScale","xExt","minendvalue","maxendvalue","scaleLinear","domain","range","getYScale","rangeMin","rangeMax","yExt","drawAxes","svg","xScaleIn","yScaleIn","append","attr","call","axisBottom","axisLeft","drawHistogram","xScale","binFunc","bin","value","d","adjEndCycleValue","thresholds","ticks","bins","metadata","yScaleBins","height","max","length","useEffect","svgSelect","select","yScale"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAAQC,QAAR,QAAuB,OAAvB;;;AAEA,SAASC,aAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAE3B,QAAMC,KAAK,GAAG,kBAAd;AACA,QAAMC,WAAW,GAAG,YAApB;AACA,QAAMC,MAAM,GAAG;AAAEC,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,KAAK,EAAE,EAAlB;AAAsBC,IAAAA,MAAM,EAAE,EAA9B;AAAkCC,IAAAA,IAAI,EAAE;AAAxC,GAAf;AACA,QAAMC,UAAU,GAAG,GAAnB;AACA,QAAMC,WAAW,GAAG,GAApB;AACA,QAAMC,eAAe,GAAG,eAAeP,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GAAxE;AACA,QAAMO,YAAY,GAAGH,UAAU,GAAGL,MAAM,CAACI,IAApB,GAA2BJ,MAAM,CAACE,KAAvD;AACA,QAAMO,aAAa,GAAGH,WAAW,GAAGN,MAAM,CAACC,GAArB,GAA2BD,MAAM,CAACG,MAAxD;;AAEA,QAAMO,SAAS,GAAG,MAAM;AACpB,QAAIC,IAAI,GAAG,CAACd,KAAK,CAACe,WAAP,EAAoBf,KAAK,CAACgB,WAA1B,CAAX;AACA,WAAOnB,EAAE,CAACoB,WAAH,GACMC,MADN,CACaJ,IADb,EAEMK,KAFN,CAEY,CAAE,CAAF,EAAKR,YAAL,CAFZ,CAAP;AAGH,GALD;;AAOA,QAAMS,SAAS,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACtC,QAAIC,IAAI,GAAG,CAACF,QAAD,EAAWC,QAAX,CAAX;AACA,WAAOzB,EAAE,CAACoB,WAAH,GACMC,MADN,CACaK,IADb,EAEMJ,KAFN,CAEY,CAAEP,aAAF,EAAiB,CAAjB,CAFZ,CAAP;AAGH,GALD;;AAOA,QAAMY,QAAQ,GAAG,CAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,EAA0BN,QAA1B,EAAoCC,QAApC,KAAiD;AAE9DG,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACKC,IADL,CACU,OADV,EACmB3B,WADnB,EAEK2B,IAFL,CAEU,WAFV,EAEuB,iBAAiBjB,aAAjB,GAAiC,GAFxD,EAGKkB,IAHL,CAGUjC,EAAE,CAACkC,UAAH,CAAcL,QAAd,CAHV;AAIAD,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACKC,IADL,CACU,OADV,EACmB3B,WADnB,EAEK4B,IAFL,CAEUjC,EAAE,CAACmC,QAAH,CAAYL,QAAZ,CAFV;AAGH,GATD;;AAWA,QAAMM,aAAa,GAAG,CAACR,GAAD,EAAMS,MAAN,KAAiB;AACnC;AACA,QAAIC,OAAO,GAAGtC,EAAE,CAACuC,GAAH,GACGC,KADH,CACS,UAASC,CAAT,EAAY;AAAE,aAAOA,CAAC,CAACC,gBAAT;AAA4B,KADnD,EACuD;AADvD,KAEGrB,MAFH,CAEUgB,MAAM,CAAChB,MAAP,EAFV,EAE4B;AAF5B,KAGGsB,UAHH,CAGcN,MAAM,CAACO,KAAP,CAAa,EAAb,CAHd,CAAd,CAFmC,CAKY;;AAC/C,QAAIC,IAAI,GAAGP,OAAO,CAACnC,KAAK,CAAC2C,QAAP,CAAlB;AACA,QAAIC,UAAU,GAAG/C,EAAE,CAACoB,WAAH,GACGE,KADH,CACS,CAAC0B,MAAD,EAAS,CAAT,CADT,CAAjB;AAEAD,IAAAA,UAAU,CAAC1B,MAAX,CAAkB,CAAC,CAAD,EAAIrB,EAAE,CAACiD,GAAH,CAAOJ,IAAP,EAAa,UAASJ,CAAT,EAAY;AAAE,aAAOA,CAAC,CAACS,MAAT;AAAkB,KAA7C,CAAJ,CAAlB,EATmC,CASuC;;AAE1EtB,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACKC,IADL,CACU,OADV,EACmB3B,WADnB,EAEK2B,IAFL,CAEU,WAFV,EAEuB,iBAAiBjB,aAAjB,GAAiC,GAFxD,EAGKkB,IAHL,CAGUjC,EAAE,CAACkC,UAAH,CAAcL,QAAd,CAHV;AAIAD,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACIC,IADJ,CACS,OADT,EACkB3B,WADlB,EAEI4B,IAFJ,CAESjC,EAAE,CAACmC,QAAH,CAAYY,UAAZ,CAFT;AAKH,GApBD;;AAsBAhD,EAAAA,KAAK,CAACoD,SAAN,CAAgB,MAAM;AAElB,UAAMC,SAAS,GAAG,MAAMhD,KAAxB;AACA,UAAMwB,GAAG,GAAG5B,EAAE,CAACqD,MAAH,CAAUD,SAAV,EACGrB,MADH,CACU,GADV,EAEGC,IAFH,CAEQ,WAFR,EAEqBnB,eAFrB,CAAZ;AAGA,UAAMwB,MAAM,GAAGrB,SAAS,EAAxB;AACA,UAAMsC,MAAM,GAAG/B,SAAS,CAAC,CAAD,EAAI,GAAJ,CAAxB;AACAI,IAAAA,QAAQ,CAACC,GAAD,EAAMS,MAAN,EAAciB,MAAd,EAAsB,CAAtB,EAAyB,GAAzB,CAAR,CARkB,CASlB;AACH,GAVD,EAUG,CAACnD,KAAD,CAVH;AAYA,sBACI;AAAA,2BACI;AAAK,MAAA,EAAE,EAAEC,KAAT;AACI,MAAA,KAAK,EAAEO,UADX;AAEI,MAAA,MAAM,EAAEC,WAFZ;AAAA,6BAII;AACI,QAAA,KAAK,EAAEE,YADX;AAEI,QAAA,MAAM,EAAEC,aAFZ;AAGI,QAAA,SAAS,EAAEF,eAHf;AAII,QAAA,IAAI,EAAC;AAJT;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GAvFQX,a;;KAAAA,a;AAuFR;AAED,eAAeA,aAAf","sourcesContent":["import * as React from \"react\";\nimport * as d3 from \"d3\";\nimport {useState} from \"react\";\n\nfunction EndValueChart (props) {\n\n    const svgID = 'endvaluechartsvg';\n    const perRunClass = 'perrundata';\n    const margin = { top: 40, right: 65, bottom: 40, left: 65 };\n    const totalWidth = 960;\n    const totalHeight = 300;\n    const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n    const boundedWidth = totalWidth - margin.left - margin.right;\n    const boundedHeight = totalHeight - margin.top - margin.bottom;\n\n    const getXScale = () => { \n        var xExt = [props.minendvalue, props.maxendvalue];\n        return d3.scaleLinear()\n                    .domain(xExt)\n                    .range([ 0, boundedWidth ]);\n    }\n\n    const getYScale = (rangeMin, rangeMax) => {\n        var yExt = [rangeMin, rangeMax];\n        return d3.scaleLinear()\n                    .domain(yExt)\n                    .range([ boundedHeight, 0 ]);\n    }\n\n    const drawAxes = (svg, xScaleIn, yScaleIn, rangeMin, rangeMax) => {\n \n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .attr(\"transform\", \"translate(0,\" + boundedHeight + \")\")\n            .call(d3.axisBottom(xScaleIn));\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .call(d3.axisLeft(yScaleIn));\n    };\n\n    const drawHistogram = (svg, xScale) => {\n        // set the parameters for the histogram\n        var binFunc = d3.bin()\n                        .value(function(d) { return d.adjEndCycleValue; })   // I need to give the vector of value\n                        .domain(xScale.domain())  // then the domain of the graphic\n                        .thresholds(xScale.ticks(10)); // then the numbers of bins\n        var bins = binFunc(props.metadata);\n        var yScaleBins = d3.scaleLinear()\n                           .range([height, 0]);\n        yScaleBins.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously\n        \n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .attr(\"transform\", \"translate(0,\" + boundedHeight + \")\")\n            .call(d3.axisBottom(xScaleIn));\n        svg.append(\"g\")\n           .attr(\"class\", perRunClass)\n           .call(d3.axisLeft(yScaleBins));\n  \n\n    }\n\n    React.useEffect(() => {\n\n        const svgSelect = '#' + svgID;\n        const svg = d3.select(svgSelect)\n                      .append(\"g\")\n                      .attr(\"transform\", marginTranslate);\n        const xScale = getXScale();\n        const yScale = getYScale(0, 100);\n        drawAxes(svg, xScale, yScale, 0, 100);\n        // console.log('endvaluechart effect');\n    }, [props] );\n\n    return (\n        <div>\n            <svg id={svgID}  \n                width={totalWidth}\n                height={totalHeight} \n             >\n                <rect\n                    width={boundedWidth}\n                    height={boundedHeight}\n                    transform={marginTranslate}\n                    fill='LightGrey'\n                 >\n\n                </rect>\n            </svg>\n        </div>\n    );\n};\n\nexport default EndValueChart;\n"]},"metadata":{},"sourceType":"module"}