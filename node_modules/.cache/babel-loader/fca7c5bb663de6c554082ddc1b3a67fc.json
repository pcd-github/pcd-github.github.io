{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/react-sample/resample/src/historical_data.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport XLSX from 'xlsx';\nimport { readFile } from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AnnualReturnData {\n  constructor(year, inflation_pct, stock_pct, bond_pct) {\n    this._year = year;\n    this._inf = inflation_pct;\n    this._stock = stock_pct;\n    this._bond = bond_pct;\n  }\n\n}\n\nconst histFile = \"/Users/paul/OneDrive/Documents/code/src/react-sample/resample/data/hist-returns.xlsx\";\nconst annualreturns = [];\n\nfunction HistoricalData() {\n  _s();\n\n  const [data, setData] = React.useState([]);\n  const [cols, setCols] = React.useState([]);\n\n  const handleFile = file => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      /* Parse data */\n      const ab = e.target.result;\n      const wb = XLSX.read(ab, {\n        type: 'array'\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      setData(data);\n      setCols(make_cols(ws['!ref']));\n    }; // var newFile = new File(ab, histFile);\n\n\n    var ab = reader.readAsArrayBuffer(file);\n  };\n\n  const exportFile = () => {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropFile, {\n    handleFile: handleFile,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(DataInput, {\n          handleFile: handleFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !data.length,\n          className: \"btn btn-success\",\n          onClick: exportFile,\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(OutTable, {\n          data: data,\n          cols: cols\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 2\n  }, this);\n}\n\n_s(HistoricalData, \"mX9nkHc5f33NmLj9fZHZvwQpJl8=\");\n\n_c = HistoricalData;\nexport default HistoricalData; // demo code from \n// https://github.com/SheetJS/sheetjs/blob/master/demos/react/sheetjs.js\n\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\n\nfunction OutTable({\n  data,\n  cols\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-responsive\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: cols.map(c => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: c.name\n          }, c.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 27\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((r, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: cols.map(c => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: r[c.key]\n          }, c.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 22\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }, this);\n}\n/* generate an array of column objects */\n\n\n_c2 = OutTable;\n\nconst make_cols = refstr => {\n  let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) o[i] = {\n    name: XLSX.utils.encode_col(i),\n    key: i\n  };\n\n  return o;\n};\n\nfunction DragDropFile({\n  handleFile,\n  children\n}) {\n  const suppress = e => {\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  const handleDrop = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    const files = e.dataTransfer.files;\n    if (files && files[0]) handleFile(files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDrop: handleDrop,\n    onDragEnter: suppress,\n    onDragOver: suppress,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 3\n  }, this);\n}\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\n\n\n_c3 = DragDropFile;\n\nfunction DataInput({\n  handleFile\n}) {\n  const handleChange = e => {\n    const files = e.target.files;\n    if (files && files[0]) handleFile(files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-inline\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: \"Drag or choose a spreadsheet file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"form-control\",\n        id: \"file\",\n        accept: SheetJSFT,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 3\n  }, this);\n}\n/* list of supported file types */\n\n\n_c4 = DataInput;\nconst SheetJSFT = [\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"].map(x => `.${x}`).join(\",\");\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"HistoricalData\");\n$RefreshReg$(_c2, \"OutTable\");\n$RefreshReg$(_c3, \"DragDropFile\");\n$RefreshReg$(_c4, \"DataInput\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/react-sample/resample/src/historical_data.js"],"names":["React","XLSX","readFile","AnnualReturnData","constructor","year","inflation_pct","stock_pct","bond_pct","_year","_inf","_stock","_bond","histFile","annualreturns","HistoricalData","data","setData","useState","cols","setCols","handleFile","file","reader","FileReader","onload","e","ab","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","make_cols","readAsArrayBuffer","exportFile","aoa_to_sheet","book_new","book_append_sheet","writeFile","length","OutTable","map","c","name","key","r","i","refstr","o","C","decode_range","encode_col","DragDropFile","children","suppress","stopPropagation","preventDefault","handleDrop","files","dataTransfer","DataInput","handleChange","SheetJSFT","x","join"],"mappings":"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","sourcesContent":["\nimport * as React from \"react\";\nimport XLSX from 'xlsx';\nimport { readFile } from 'xlsx';\n\nclass AnnualReturnData {\n\n    constructor (year, inflation_pct, stock_pct, bond_pct) {\n        this._year = year;\n        this._inf = inflation_pct;\n        this._stock = stock_pct;\n        this._bond = bond_pct;\n    }\n}\n\nconst histFile = \"/Users/paul/OneDrive/Documents/code/src/react-sample/resample/data/hist-returns.xlsx\";\nconst annualreturns = [];\n\nfunction HistoricalData () {\n\n    const [data, setData] = React.useState([]);\n    const [cols, setCols] = React.useState([]);\n\n    const handleFile = (file) => {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            /* Parse data */\n            const ab = e.target.result;\n            const wb = XLSX.read(ab, {type:'array'});\n            /* Get first worksheet */\n            const wsname = wb.SheetNames[0];\n            const ws = wb.Sheets[wsname];\n            /* Convert array of arrays */\n            const data = XLSX.utils.sheet_to_json(ws, {header:1});\n            /* Update state */\n            setData(data);\n            setCols(make_cols(ws['!ref']))\n        };\n        \n        // var newFile = new File(ab, histFile);\n        var ab = reader.readAsArrayBuffer(file);\n    }\n\n    const exportFile = () => {\n\t\t/* convert state to workbook */\n\t\tconst ws = XLSX.utils.aoa_to_sheet(data);\n\t\tconst wb = XLSX.utils.book_new();\n\t\tXLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n\t\t/* generate XLSX file and send to client */\n\t\tXLSX.writeFile(wb, \"sheetjs.xlsx\")\n\t};\n\n\treturn (\n\t<DragDropFile handleFile={handleFile}>\n\t\t<div className=\"row\"><div className=\"col-xs-12\">\n\t\t\t<DataInput handleFile={handleFile} />\n\t\t</div></div>\n\t\t<div className=\"row\"><div className=\"col-xs-12\">\n\t\t\t<button disabled={!data.length} className=\"btn btn-success\" onClick={exportFile}>Export</button>\n\t\t</div></div>\n\t\t<div className=\"row\"><div className=\"col-xs-12\">\n\t\t\t<OutTable data={data} cols={cols} />\n\t\t</div></div>\n\t</DragDropFile>\n\t);\n\n}\n\nexport default HistoricalData;\n\n// demo code from \n// https://github.com/SheetJS/sheetjs/blob/master/demos/react/sheetjs.js\n\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\nfunction OutTable({ data, cols }) {\n\treturn (\n\t\t<div className=\"table-responsive\">\n\t\t\t<table className=\"table table-striped\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>{cols.map((c) => <th key={c.key}>{c.name}</th>)}</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{data.map((r,i) => <tr key={i}>\n\t\t\t\t\t\t{cols.map(c => <td key={c.key}>{ r[c.key] }</td>)}\n\t\t\t\t\t</tr>)}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\n/* generate an array of column objects */\nconst make_cols = refstr => {\n\tlet o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\n\tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\n\treturn o;\n};\n\nfunction DragDropFile({ handleFile, children }) {\n\tconst suppress = (e) => { e.stopPropagation(); e.preventDefault(); };\n\tconst handleDrop = (e) => { e.stopPropagation(); e.preventDefault();\n\t\tconst files = e.dataTransfer.files;\n\t\tif(files && files[0]) handleFile(files[0]);\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tonDrop={handleDrop}\n\t\t\tonDragEnter={suppress}\n\t\t\tonDragOver={suppress}\n\t\t>\n\t\t{children}\n\t\t</div>\n\t);\n}\n\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\n\nfunction DataInput({ handleFile }) {\n\tconst handleChange = (e) => {\n\t\tconst files = e.target.files;\n\t\tif(files && files[0]) handleFile(files[0]);\n\t};\n\n\treturn (\n\t\t<form className=\"form-inline\">\n\t\t\t<div className=\"form-group\">\n\t\t\t\t<label htmlFor=\"file\">Drag or choose a spreadsheet file</label>\n\t\t\t\t<br />\n\t\t\t\t<input\n\t\t\t\t\ttype=\"file\"\n\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\tid=\"file\"\n\t\t\t\t\taccept={SheetJSFT}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\n/* list of supported file types */\nconst SheetJSFT = [\n\t\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"\n].map(x => `.${x}`).join(\",\");\n"]},"metadata":{},"sourceType":"module"}