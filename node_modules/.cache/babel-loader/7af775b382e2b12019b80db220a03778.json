{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/historical_data.js\";\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport hist from \"./data/hist-returns.csv\"; // d3 line chart example : https://www.d3-graph-gallery.com/graph/line_basic.html\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HistoricalChart() {\n  var svg = d3.select(\"#mydatavis\").append(\"svg\").attr(\"width\", 1000); // Create the scale\n\n  var x = d3.scaleLinear().domain([0, 100]) // This is what is written on the Axis: from 0 to 100\n  .range([100, 800]); // This is where the axis is placed: from 100px to 800px\n  // Draw the axis\n\n  svg.append(\"g\").attr(\"transform\", \"translate(0,50)\").call(d3.axisBottom(x));\n  /*\n  // set the dimensions and margins of the graph\n  var margin = {top: 50, right: 50, bottom: 50, left: 50},\n  width = 1000 - margin.left - margin.right,\n  height = 1000 - margin.top - margin.bottom;\n   // append the svg object to the body of the page\n  var svg = d3.select(\"#my_dataviz\")\n  .append(\"svg\")\n  // .attr(\"width\", width + margin.left + margin.right)\n  // .attr(\"height\", height + margin.top + margin.bottom)\n  // .append(\"g\")\n  .attr(\"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");\n   d3.csv(hist,function(d) {\n                  return { year: +d.year, inflation: +d.inflation, equity: +d.equity, bonds: +d.bonds };\n              })\n      .then (function(data) {\n               var x = d3.scaleLinear()\n                  .domain([1921,2020])\n                  .range(0, width);\n              svg.append(\"g\")\n                  .attr(\"transform\", \"translate(0,\" + height + \")\")\n                  .call(d3.axisBottom(x));\n              \n              var y = d3.scaleLinear()\n                  .domain(-0.50, 0.50)\n                  .range(height, 0);\n              svg.append(\"g\")\n                  .call(d3.axisLeft(y));\n                  */\n\n  /*\n                  var x = d3.scaleLinear()\n                      .domain([d3.min(data, function(d) { return d.year; }),\n                               d3.max(data, function(d) { return d.year; })])\n                      .range([ 0, width ]);\n                  \n                  svg.append(\"g\")\n                      .attr(\"transform\", \"translate(0,\" + height + \")\")\n                      .call(d3.axisBottom(x));\n  \n                  // Add Y axis\n                  var y = d3.scaleLinear()\n                      .domain([d3.min(data, function(d) { return d.equity; }),\n                               d3.max(data, function(d) { return d.equity; })])\n                      .range([ height, 0 ]);\n                  \n                  svg.append(\"g\")\n                      .call(d3.axisLeft(y));\n  \n                  // Add the line\n                  svg.append(\"path\")\n                  .datum(data)\n                  .attr(\"fill\", \"none\")\n                  .attr(\"stroke\", \"steelblue\")\n                  .attr(\"stroke-width\", 1.5)\n                  .attr(\"d\", d3.line()\n                      .x(function(d) { return x(d.year) })\n                      .y(function(d) { return y(d.equity) })\n                      )\n  \n              });\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"my_dataviz\",\n      width: \"1200\",\n      height: \"1200\",\n      bgcolor: \"#880088\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\n\n\n_c = HistoricalChart;\n\nfunction OutTable({\n  data,\n  cols\n}) {\n  const makePct = pctIn => {\n    pctIn = pctIn * 100;\n    pctIn = Math.round((pctIn + Number.EPSILON) * 100) / 100;\n    return pctIn;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-responsive\",\n    children: [/*#__PURE__*/_jsxDEV(HistoricalChart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: cols.map(c => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: [c, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 27\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((r, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: r[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [makePct(r[1]), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [makePct(r[2]), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [makePct(r[3]), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 40\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 3\n  }, this);\n}\n\n_c2 = OutTable;\nexport default HistoricalChart;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HistoricalChart\");\n$RefreshReg$(_c2, \"OutTable\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/historical_data.js"],"names":["React","d3","hist","HistoricalChart","svg","select","append","attr","x","scaleLinear","domain","range","call","axisBottom","OutTable","data","cols","makePct","pctIn","Math","round","Number","EPSILON","map","c","r","i"],"mappings":"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","sourcesContent":["\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport hist from \"./data/hist-returns.csv\";\n\n// d3 line chart example : https://www.d3-graph-gallery.com/graph/line_basic.html\nfunction HistoricalChart() {\n\n    var svg = d3.select(\"#mydatavis\")\n        .append(\"svg\")\n        .attr(\"width\", 1000)\n  \n  // Create the scale\n    var x = d3.scaleLinear()\n        .domain([0, 100])         // This is what is written on the Axis: from 0 to 100\n        .range([100, 800]);       // This is where the axis is placed: from 100px to 800px\n  \n  // Draw the axis\n  svg.append(\"g\")\n    .attr(\"transform\", \"translate(0,50)\")      \n    .call(d3.axisBottom(x));\n\n    /*\n    // set the dimensions and margins of the graph\n    var margin = {top: 50, right: 50, bottom: 50, left: 50},\n    width = 1000 - margin.left - margin.right,\n    height = 1000 - margin.top - margin.bottom;\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#my_dataviz\")\n    .append(\"svg\")\n    // .attr(\"width\", width + margin.left + margin.right)\n    // .attr(\"height\", height + margin.top + margin.bottom)\n    // .append(\"g\")\n    .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    d3.csv(hist,function(d) {\n                    return { year: +d.year, inflation: +d.inflation, equity: +d.equity, bonds: +d.bonds };\n                })\n        .then (function(data) {\n\n                var x = d3.scaleLinear()\n                    .domain([1921,2020])\n                    .range(0, width);\n                svg.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\n                    .call(d3.axisBottom(x));\n                \n                var y = d3.scaleLinear()\n                    .domain(-0.50, 0.50)\n                    .range(height, 0);\n                svg.append(\"g\")\n                    .call(d3.axisLeft(y));\n                    */\n\n/*\n                var x = d3.scaleLinear()\n                    .domain([d3.min(data, function(d) { return d.year; }),\n                             d3.max(data, function(d) { return d.year; })])\n                    .range([ 0, width ]);\n                \n                svg.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\n                    .call(d3.axisBottom(x));\n\n                // Add Y axis\n                var y = d3.scaleLinear()\n                    .domain([d3.min(data, function(d) { return d.equity; }),\n                             d3.max(data, function(d) { return d.equity; })])\n                    .range([ height, 0 ]);\n                \n                svg.append(\"g\")\n                    .call(d3.axisLeft(y));\n\n                // Add the line\n                svg.append(\"path\")\n                .datum(data)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"steelblue\")\n                .attr(\"stroke-width\", 1.5)\n                .attr(\"d\", d3.line()\n                    .x(function(d) { return x(d.year) })\n                    .y(function(d) { return y(d.equity) })\n                    )\n\n            });\n*/\n    return(\n        <div>\n            <div id=\"my_dataviz\" width=\"1200\" height=\"1200\" bgcolor=\"#880088\"></div>            \n        </div>\n    );\n}\n\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\nfunction OutTable({ data, cols }) {\n\n    const makePct = (pctIn) => {\n        pctIn = pctIn * 100;\n        pctIn = Math.round((pctIn + Number.EPSILON) * 100) / 100;\n        return (pctIn);\n    }\n\n\treturn (\n\t\t<div className=\"table-responsive\">\n\t\t\t<HistoricalChart />\n            <table className=\"table table-striped\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>{cols.map((c) => <th>{c} </th>)}</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n                    {data.map((r,i) => <tr>\n                        <td>\n                            {r[0]}\n                        </td>\n                        <td>\n                            {makePct(r[1])}%  \n                        </td>\n                        <td>\n                            {makePct(r[2])}%                    \n                        </td>\n                        <td>\n                            {makePct(r[3])}%                                            \n                        </td>\n                    </tr>)}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\nexport default HistoricalChart;\n"]},"metadata":{},"sourceType":"module"}