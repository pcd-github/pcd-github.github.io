{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/historical_data.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport hist from \"./data/hist-returns.csv\"; // d3 line chart example : https://www.d3-graph-gallery.com/graph/line_basic.html\n// example to draw axis : https://wattenberger.com/blog/react-and-d3\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HistoricalChart() {\n  _s();\n\n  React.useEffect(() => {\n    // set the dimensions and margins of the graph\n    var margin = {\n      top: 50,\n      right: 50,\n      bottom: 50,\n      left: 50\n    },\n        width = 1000 - margin.left - margin.right,\n        height = 1000 - margin.top - margin.bottom;\n    var svg = d3.select(\"#d3target\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", 1200); // Create the scale\n\n    var x = d3.scaleLinear().domain([1921, 2020]) // This is what is written on the Axis: from 0 to 100\n    .range([100, 800]); // This is where the axis is placed: from 100px to 800px\n    // Draw the axis\n\n    svg.append(\"g\").attr(\"transform\", \"translate(0,50)\").call(d3.axisBottom(x));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"d3target\",\n      width: \"1200\",\n      height: \"1200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n/*\nfunction waitForIt () {\n   \n    // set the dimensions and margins of the graph\n    var margin = {top: 50, right: 50, bottom: 50, left: 50},\n    width = 1000 - margin.left - margin.right,\n    height = 1000 - margin.top - margin.bottom;\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#my_dataviz\")\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    d3.csv(hist,function(d) {\n                    return { year: +d.year, inflation: +d.inflation, equity: +d.equity, bonds: +d.bonds };\n                })\n        .then (function(data) {\n\n                var x = d3.scaleLinear()\n                    .domain([1921,2020])\n                    .range(0, width);\n                svg.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\n                    .call(d3.axisBottom(x));\n                \n                var y = d3.scaleLinear()\n                    .domain(-0.50, 0.50)\n                    .range(height, 0);\n                svg.append(\"g\")\n                    .call(d3.axisLeft(y));\n                    \n\n\n                var xx = d3.scaleLinear()\n                    .domain([d3.min(data, function(d) { return d.year; }),\n                             d3.max(data, function(d) { return d.year; })])\n                    .range([ 0, width ]);\n                \n                svg.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\n                    .call(d3.axisBottom(x));\n\n                // Add Y axis\n                var yy = d3.scaleLinear()\n                    .domain([d3.min(data, function(d) { return d.equity; }),\n                             d3.max(data, function(d) { return d.equity; })])\n                    .range([ height, 0 ]);\n                \n                svg.append(\"g\")\n                    .call(d3.axisLeft(y));\n\n                // Add the line\n                svg.append(\"path\")\n                .datum(data)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"steelblue\")\n                .attr(\"stroke-width\", 1.5)\n                .attr(\"d\", d3.line()\n                    .x(function(d) { return x(d.year) })\n                    .y(function(d) { return y(d.equity) })\n                    )\n\n            });\n\n        return (\n            <div></div>\n        );\n}\n*/\n\n\n_s(HistoricalChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = HistoricalChart;\nexport default HistoricalChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"HistoricalChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/historical_data.js"],"names":["React","d3","hist","HistoricalChart","useEffect","margin","top","right","bottom","left","width","height","svg","select","append","attr","x","scaleLinear","domain","range","call","axisBottom"],"mappings":";;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,IAAP,MAAiB,yBAAjB,C,CAEA;AACA;;;;AACA,SAASC,eAAT,GAA2B;AAAA;;AAEvBH,EAAAA,KAAK,CAACI,SAAN,CAAgB,MAAM;AACd;AACJ,QAAIC,MAAM,GAAG;AAACC,MAAAA,GAAG,EAAE,EAAN;AAAUC,MAAAA,KAAK,EAAE,EAAjB;AAAqBC,MAAAA,MAAM,EAAE,EAA7B;AAAiCC,MAAAA,IAAI,EAAE;AAAvC,KAAb;AAAA,QACIC,KAAK,GAAG,OAAOL,MAAM,CAACI,IAAd,GAAqBJ,MAAM,CAACE,KADxC;AAAA,QAEII,MAAM,GAAG,OAAON,MAAM,CAACC,GAAd,GAAoBD,MAAM,CAACG,MAFxC;AAIA,QAAII,GAAG,GAAGX,EAAE,CAACY,MAAH,CAAU,WAAV,EACGC,MADH,CACU,KADV,EAEGC,IAFH,CAEQ,OAFR,EAEiBL,KAAK,GAAGL,MAAM,CAACI,IAAf,GAAsBJ,MAAM,CAACE,KAF9C,EAGGQ,IAHH,CAGQ,QAHR,EAGkB,IAHlB,CAAV,CANkB,CAWlB;;AACA,QAAIC,CAAC,GAAGf,EAAE,CAACgB,WAAH,GACHC,MADG,CACI,CAAC,IAAD,EAAO,IAAP,CADJ,EACsB;AADtB,KAEHC,KAFG,CAEG,CAAC,GAAD,EAAM,GAAN,CAFH,CAAR,CAZkB,CAcY;AAE9B;;AACAP,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EACKC,IADL,CACU,WADV,EACuB,iBADvB,EAEKK,IAFL,CAEUnB,EAAE,CAACoB,UAAH,CAAcL,CAAd,CAFV;AAIH,GArBD;AAuBA,sBACI;AAAA,2BACK;AAAK,MAAA,EAAE,EAAC,UAAR;AAAmB,MAAA,KAAK,EAAC,MAAzB;AAAgC,MAAA,MAAM,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA1GSb,e;;KAAAA,e;AA4GT,eAAeA,eAAf","sourcesContent":["\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport hist from \"./data/hist-returns.csv\";\n\n// d3 line chart example : https://www.d3-graph-gallery.com/graph/line_basic.html\n// example to draw axis : https://wattenberger.com/blog/react-and-d3\nfunction HistoricalChart() {\n\n    React.useEffect(() => {\n            // set the dimensions and margins of the graph\n        var margin = {top: 50, right: 50, bottom: 50, left: 50},\n            width = 1000 - margin.left - margin.right,\n            height = 1000 - margin.top - margin.bottom;\n\n        var svg = d3.select(\"#d3target\")\n                    .append(\"svg\")\n                    .attr(\"width\", width + margin.left + margin.right)\n                    .attr(\"height\", 1200)\n   \n        // Create the scale\n        var x = d3.scaleLinear()\n            .domain([1921, 2020])     // This is what is written on the Axis: from 0 to 100\n            .range([100, 800]);       // This is where the axis is placed: from 100px to 800px\n    \n        // Draw the axis\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,50)\")      \n            .call(d3.axisBottom(x));\n        \n    })\n\n    return(\n        <div>\n             <div id=\"d3target\" width=\"1200\" height=\"1200\" >\n                 \n             </div> \n        </div>\n    );\n}\n\n/*\nfunction waitForIt () {\n   \n    // set the dimensions and margins of the graph\n    var margin = {top: 50, right: 50, bottom: 50, left: 50},\n    width = 1000 - margin.left - margin.right,\n    height = 1000 - margin.top - margin.bottom;\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#my_dataviz\")\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    d3.csv(hist,function(d) {\n                    return { year: +d.year, inflation: +d.inflation, equity: +d.equity, bonds: +d.bonds };\n                })\n        .then (function(data) {\n\n                var x = d3.scaleLinear()\n                    .domain([1921,2020])\n                    .range(0, width);\n                svg.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\n                    .call(d3.axisBottom(x));\n                \n                var y = d3.scaleLinear()\n                    .domain(-0.50, 0.50)\n                    .range(height, 0);\n                svg.append(\"g\")\n                    .call(d3.axisLeft(y));\n                    \n\n\n                var xx = d3.scaleLinear()\n                    .domain([d3.min(data, function(d) { return d.year; }),\n                             d3.max(data, function(d) { return d.year; })])\n                    .range([ 0, width ]);\n                \n                svg.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\n                    .call(d3.axisBottom(x));\n\n                // Add Y axis\n                var yy = d3.scaleLinear()\n                    .domain([d3.min(data, function(d) { return d.equity; }),\n                             d3.max(data, function(d) { return d.equity; })])\n                    .range([ height, 0 ]);\n                \n                svg.append(\"g\")\n                    .call(d3.axisLeft(y));\n\n                // Add the line\n                svg.append(\"path\")\n                .datum(data)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"steelblue\")\n                .attr(\"stroke-width\", 1.5)\n                .attr(\"d\", d3.line()\n                    .x(function(d) { return x(d.year) })\n                    .y(function(d) { return y(d.equity) })\n                    )\n\n            });\n\n        return (\n            <div></div>\n        );\n}\n*/\n\nexport default HistoricalChart;\n"]},"metadata":{},"sourceType":"module"}