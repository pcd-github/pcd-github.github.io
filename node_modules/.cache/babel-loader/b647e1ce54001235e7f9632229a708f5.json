{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/historical_data.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport hist from \"./data/hist-returns.csv\"; // d3 line chart example : https://www.d3-graph-gallery.com/graph/line_basic.html\n// example to draw axis : https://wattenberger.com/blog/react-and-d3\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HistoricalChart() {\n  _s();\n\n  React.useEffect(() => {\n    // set the dimensions and margins of the graph\n    var margin = {\n      top: 50,\n      right: 50,\n      bottom: 50,\n      left: 50\n    },\n        width = 800 - margin.left - margin.right,\n        height = 600 - margin.top - margin.bottom;\n    var svg = d3.select(\"#d3target\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    d3.csv(hist, function (d) {\n      var parseYear = d3.timeParse(\"%Y\");\n      return {\n        year: parseYear(d.year),\n        inflation: +d.inflation,\n        equity: +d.equity,\n        bonds: +d.bonds\n      };\n    }).then(function (data) {\n      var x = d3.scaleLinear().domain([d3.min(data, function (d) {\n        return d.year;\n      }), d3.max(data, function (d) {\n        return d.year;\n      })]).range([0, width]);\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x));\n      var y = d3.scaleLinear().domain([d3.min(data, function (d) {\n        return d.equity;\n      }), d3.max(data, function (d) {\n        return d.equity;\n      })]).range([height, 0]);\n      svg.append(\"g\").call(d3.axisLeft(y)); // Add the equity line\n\n      svg.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n        return x(d.year);\n      }).y(function (d) {\n        return y(d.equity);\n      })); // Add the bonds line\n\n      svg.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"red\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n        return x(d.year);\n      }).y(function (d) {\n        return y(d.bonds);\n      }));\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"d3target\",\n      width: \"1200\",\n      height: \"1200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n/*\nfunction waitForIt () {\n   \n    // set the dimensions and margins of the graph\n    var margin = {top: 50, right: 50, bottom: 50, left: 50},\n    width = 1000 - margin.left - margin.right,\n    height = 1000 - margin.top - margin.bottom;\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#my_dataviz\")\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    d3.csv(hist,function(d) {\n                    return { year: +d.year, inflation: +d.inflation, equity: +d.equity, bonds: +d.bonds };\n                })\n        .then (function(data) {\n\n                var xx = d3.scaleLinear()\n                    .domain([d3.min(data, function(d) { return d.year; }),\n                             d3.max(data, function(d) { return d.year; })])\n                    .range([ 0, width ]);\n                \n                svg.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\n                    .call(d3.axisBottom(x));\n\n                // Add Y axis\n                var yy = d3.scaleLinear()\n                    .domain([d3.min(data, function(d) { return d.equity; }),\n                             d3.max(data, function(d) { return d.equity; })])\n                    .range([ height, 0 ]);\n                \n                svg.append(\"g\")\n                    .call(d3.axisLeft(y));\n\n                // Add the line\n                svg.append(\"path\")\n                .datum(data)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"steelblue\")\n                .attr(\"stroke-width\", 1.5)\n                .attr(\"d\", d3.line()\n                    .x(function(d) { return x(d.year) })\n                    .y(function(d) { return y(d.equity) })\n                    )\n\n            });\n\n        return (\n            <div></div>\n        );\n}\n*/\n\n\n_s(HistoricalChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = HistoricalChart;\nexport default HistoricalChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"HistoricalChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/historical_data.js"],"names":["React","d3","hist","HistoricalChart","useEffect","margin","top","right","bottom","left","width","height","svg","select","append","attr","csv","d","parseYear","timeParse","year","inflation","equity","bonds","then","data","x","scaleLinear","domain","min","max","range","call","axisBottom","y","axisLeft","datum","line"],"mappings":"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","sourcesContent":["\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport hist from \"./data/hist-returns.csv\";\n\n// d3 line chart example : https://www.d3-graph-gallery.com/graph/line_basic.html\n// example to draw axis : https://wattenberger.com/blog/react-and-d3\nfunction HistoricalChart() {\n\n    React.useEffect(() => {\n            // set the dimensions and margins of the graph\n        var margin = {top: 50, right: 50, bottom: 50, left: 50},\n            width = 800 - margin.left - margin.right,\n            height = 600 - margin.top - margin.bottom;\n\n        var svg = d3.select(\"#d3target\")\n                    .append(\"svg\")\n                    .attr(\"width\", width + margin.left + margin.right)\n                    .attr(\"height\", height + margin.top + margin.bottom)\n                    .append(\"g\")\n                    .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n   \n        d3.csv(hist,function(d) {\n            var parseYear = d3.timeParse(\"%Y\");\n            return { year: parseYear(d.year), inflation: +d.inflation, equity: +d.equity, bonds: +d.bonds };\n        })\n        .then (function(data) {\n\n            var x = d3.scaleLinear()\n                .domain([d3.min(data, function(d) { return d.year; }),\n                        d3.max(data, function(d) { return d.year; })])\n                .range([ 0, width ]);\n            \n            svg.append(\"g\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(d3.axisBottom(x));\n\n            var y = d3.scaleLinear()\n                .domain([d3.min(data, function(d) { return d.equity; }),\n                            d3.max(data, function(d) { return d.equity; })])\n                .range([ height, 0 ]);\n            \n            svg.append(\"g\")\n                .call(d3.axisLeft(y));\n\n            // Add the equity line\n            svg.append(\"path\")\n            .datum(data)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"steelblue\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", d3.line()\n                .x(function(d) { return x(d.year) })\n                .y(function(d) { return y(d.equity) })\n                );\n            \n                // Add the bonds line\n            svg.append(\"path\")\n            .datum(data)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", d3.line()\n                .x(function(d) { return x(d.year) })\n                .y(function(d) { return y(d.bonds) })\n                );\n                \n    \n        })\n    })\n\n    return(\n        <div>\n             <div id=\"d3target\" width=\"1200\" height=\"1200\" >\n                 \n             </div> \n        </div>\n    );\n}\n\n/*\nfunction waitForIt () {\n   \n    // set the dimensions and margins of the graph\n    var margin = {top: 50, right: 50, bottom: 50, left: 50},\n    width = 1000 - margin.left - margin.right,\n    height = 1000 - margin.top - margin.bottom;\n\n    // append the svg object to the body of the page\n    var svg = d3.select(\"#my_dataviz\")\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\",\n        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    d3.csv(hist,function(d) {\n                    return { year: +d.year, inflation: +d.inflation, equity: +d.equity, bonds: +d.bonds };\n                })\n        .then (function(data) {\n\n                var xx = d3.scaleLinear()\n                    .domain([d3.min(data, function(d) { return d.year; }),\n                             d3.max(data, function(d) { return d.year; })])\n                    .range([ 0, width ]);\n                \n                svg.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\n                    .call(d3.axisBottom(x));\n\n                // Add Y axis\n                var yy = d3.scaleLinear()\n                    .domain([d3.min(data, function(d) { return d.equity; }),\n                             d3.max(data, function(d) { return d.equity; })])\n                    .range([ height, 0 ]);\n                \n                svg.append(\"g\")\n                    .call(d3.axisLeft(y));\n\n                // Add the line\n                svg.append(\"path\")\n                .datum(data)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"steelblue\")\n                .attr(\"stroke-width\", 1.5)\n                .attr(\"d\", d3.line()\n                    .x(function(d) { return x(d.year) })\n                    .y(function(d) { return y(d.equity) })\n                    )\n\n            });\n\n        return (\n            <div></div>\n        );\n}\n*/\n\nexport default HistoricalChart;\n"]},"metadata":{},"sourceType":"module"}