{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/historical_data.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport { LineChart } from \"@d3/multi-line-chart\";\nimport hist from \"./data/hist-returns.csv\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HistoricalChart() {\n  _s();\n\n  React.useEffect(() => {\n    const chart = LineChart(historicaldata, {\n      x: d => d.year,\n      y: d => d.equity,\n      yLabel: \"Yield (%)\",\n      width,\n      height: 1200,\n      color: \"steelblue\"\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"d3target\",\n      width: \"1200\",\n      height: \"1200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n} // d3 line chart example : https://www.d3-graph-gallery.com/graph/line_basic.html\n// example to draw axis : https://wattenberger.com/blog/react-and-d3\n\n\n_s(HistoricalChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = HistoricalChart;\n\nfunction ZHistoricalChart() {\n  _s2();\n\n  React.useEffect(() => {\n    // set the dimensions and margins of the graph\n    var margin = {\n      top: 50,\n      right: 50,\n      bottom: 50,\n      left: 50\n    },\n        width = 800 - margin.left - margin.right,\n        height = 600 - margin.top - margin.bottom;\n    var svg = d3.select(\"#d3target\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    d3.csv(hist, function (d) {\n      return {\n        year: d.year,\n        inflation: +d.inflation,\n        equity: +d.equity,\n        bond: +d.bond\n      };\n    }).then(function (data) {\n      var pctFormat = d3.format(\"4.2%\");\n      var yearFormat = d3.format(\"d\");\n      var x = d3.scaleLinear().domain([d3.min(data, function (d) {\n        return d.year;\n      }), d3.max(data, function (d) {\n        return d.year;\n      })]).range([0, width]);\n      var xGen = d3.axisBottom(x).tickFormat(yearFormat);\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xGen);\n      var y = d3.scaleLinear().domain([d3.min(data, function (d) {\n        return d.equity;\n      }), d3.max(data, function (d) {\n        return d.equity;\n      })]).range([height, 0]);\n      var yGen = d3.axisLeft(y).tickFormat(pctFormat);\n      svg.append(\"g\").call(yGen); // Add the equity line\n\n      svg.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n        return x(d.year);\n      }).y(function (d) {\n        return y(d.equity);\n      })); // Add the bonds line\n\n      svg.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"cyan\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n        return x(d.year);\n      }).y(function (d) {\n        return y(d.bond);\n      })); // Add the inflation line\n\n      svg.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"red\").attr(\"stroke-width\", 1.5).style(\"stroke-dasharray\", \"5, 5\").attr(\"d\", d3.line().x(function (d) {\n        return x(d.year);\n      }).y(function (d) {\n        return y(d.inflation);\n      }));\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"d3target\",\n      width: \"1200\",\n      height: \"1200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ZHistoricalChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = ZHistoricalChart;\nexport default HistoricalChart;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HistoricalChart\");\n$RefreshReg$(_c2, \"ZHistoricalChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/historical_data.js"],"names":["React","d3","LineChart","hist","HistoricalChart","useEffect","chart","historicaldata","x","d","year","y","equity","yLabel","width","height","color","ZHistoricalChart","margin","top","right","bottom","left","svg","select","append","attr","csv","inflation","bond","then","data","pctFormat","format","yearFormat","scaleLinear","domain","min","max","range","xGen","axisBottom","tickFormat","call","yGen","axisLeft","datum","line","style"],"mappings":"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","sourcesContent":["\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport {LineChart} from \"@d3/multi-line-chart\"\nimport hist from \"./data/hist-returns.csv\";\n\nfunction HistoricalChart () {\n\n    React.useEffect(() => {\n\n    const chart = LineChart(historicaldata, {\n        x: d => d.year,\n        y: d => d.equity,\n        yLabel: \"Yield (%)\",\n        width,\n        height: 1200,\n        color: \"steelblue\",\n      });\n\n    });\n\n      return (\n        <div>\n             <div id=\"d3target\" width=\"1200\" height=\"1200\" >\n                 \n             </div> \n        </div>\n      );\n}\n\n// d3 line chart example : https://www.d3-graph-gallery.com/graph/line_basic.html\n// example to draw axis : https://wattenberger.com/blog/react-and-d3\nfunction ZHistoricalChart() {\n\n    React.useEffect(() => {\n            // set the dimensions and margins of the graph\n        var margin = {top: 50, right: 50, bottom: 50, left: 50},\n            width = 800 - margin.left - margin.right,\n            height = 600 - margin.top - margin.bottom;\n\n        var svg = d3.select(\"#d3target\")\n                    .append(\"svg\")\n                    .attr(\"width\", width + margin.left + margin.right)\n                    .attr(\"height\", height + margin.top + margin.bottom)\n                    .append(\"g\")\n                    .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n   \n        d3.csv(hist,function(d) {\n            return { year: d.year, inflation: +d.inflation, equity: +d.equity, bond: +d.bond };\n        })\n        .then (function(data) {\n\n            var pctFormat = d3.format(\"4.2%\");\n            var yearFormat = d3.format(\"d\");\n\n            var x = d3.scaleLinear()\n                .domain([d3.min(data, function(d) { return d.year; }),\n                        d3.max(data, function(d) { return d.year; })])\n                .range([ 0, width ]);\n            var xGen = d3.axisBottom(x)\n                        .tickFormat(yearFormat);\n            \n            svg.append(\"g\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(xGen);\n\n            var y = d3.scaleLinear()\n                .domain([d3.min(data, function(d) { return d.equity; }),\n                            d3.max(data, function(d) { return d.equity; })])\n                .range([ height, 0 ]);\n            var yGen = d3.axisLeft(y)\n                        .tickFormat(pctFormat);\n            \n            svg.append(\"g\")\n                .call(yGen);\n\n            // Add the equity line\n            svg.append(\"path\")\n            .datum(data)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"steelblue\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", d3.line()\n                .x(function(d) { return x(d.year) })\n                .y(function(d) { return y(d.equity) })\n                );\n            \n            // Add the bonds line\n            svg.append(\"path\")\n            .datum(data)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"cyan\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", d3.line()\n                .x(function(d) { return x(d.year) })\n                .y(function(d) { return y(d.bond) })\n                );\n\n            // Add the inflation line\n            svg.append(\"path\")\n            .datum(data)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 1.5)\n            .style(\"stroke-dasharray\", (\"5, 5\"))\n            .attr(\"d\", d3.line()\n                .x(function(d) { return x(d.year) })\n                .y(function(d) { return y(d.inflation) })\n                );\n                \n        })\n    })\n\n    return(\n        <div>\n             <div id=\"d3target\" width=\"1200\" height=\"1200\" >\n                 \n             </div> \n        </div>\n    );\n}\n\nexport default HistoricalChart;\n"]},"metadata":{},"sourceType":"module"}