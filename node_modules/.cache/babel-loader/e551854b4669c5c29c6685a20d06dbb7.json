{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport './common.js';\nimport { getHighValueColorString, getLowValueColorString, getThresholdValues } from \"./common.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EndValueChart(props) {\n  _s();\n\n  const svgID = 'endvaluechartsvg';\n  const svgSelect = '#' + svgID;\n  const perRunClass = 'perrunevdata';\n  const histoBarClass = 'histobar';\n  const areaClass = 'areaclass';\n  const barGroupID = 'bargroup';\n  const pathGroupID = 'pathgroupid';\n  const margin = {\n    top: 40,\n    right: 65,\n    bottom: 40,\n    left: 65\n  };\n  const totalWidth = 960;\n  const totalHeight = 300;\n  const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n  const boundedWidth = totalWidth - margin.left - margin.right;\n  const boundedHeight = totalHeight - margin.top - margin.bottom;\n  const ttBinWrapID = 'ttevwrap';\n  const ttBinBackID = 'ttevback';\n  const ttBinRangeID = 'ttevrange';\n  const ttBinPctID = 'ttevpct';\n  const tooltipWidth = 75;\n  const tooltipHeight = 75;\n\n  const cleanupPrev = svg => {\n    const perRunSelect = '.' + perRunClass;\n    d3.selectAll(perRunSelect).remove();\n  };\n\n  const getXScaleForAxis = () => {\n    const thresholdValues = getThresholdValues();\n    const numThresholds = thresholdValues.length;\n    var thresholdRange = [];\n    var thresholdInc = boundedWidth / (numThresholds + 1);\n\n    for (var i = 0; i <= thresholdValues.length; i++) {\n      thresholdRange[i] = i * thresholdInc;\n    }\n\n    return d3.scaleThreshold().domain(thresholdValues).range(thresholdRange);\n  };\n\n  const calcBinMetadata = data => {\n    const oneBinMetadata = {\n      'binData': data,\n      'extBin': d3.extent(data, d => d.adjEndCycleValue),\n      'extPctStartValue': d3.extent(data, d => d.pctOfStart),\n      'binCount': data.length\n    };\n    return oneBinMetadata;\n  };\n\n  const drawReferenceRects = (bins, parent, xScaleBins) => {\n    const lowValueColorString = getLowValueColorString();\n    const highValueColorString = getHighValueColorString();\n    const refRectOpacity = '0.25';\n    const xForOne = xScaleBins(1.0);\n    const width = xScaleBins(bins[0].x1) - xScaleBins(bins[0].x0); // startValue reference rect\n\n    parent.append('rect').attr('class', perRunClass).style('opacity', refRectOpacity).attr('x', xForOne).attr('y', 0).attr('width', width).attr('height', boundedHeight); // failures and \n    // low end value reference rect\n\n    parent.append('rect').attr('class', perRunClass).style('opacity', refRectOpacity).attr('fill', lowValueColorString).attr('x', 0).attr('y', 0).attr('width', xForOne).attr('height', boundedHeight); // high value reference rect\n\n    parent.append('rect').attr('class', perRunClass).style('opacity', refRectOpacity).attr('fill', highValueColorString).attr('x', xForOne + width).attr('y', 0).attr('width', boundedWidth - xForOne - width).attr('height', boundedHeight);\n  };\n\n  const drawReferenceLines = (bins, parent, xScaleBins) => {\n    const xForOne = xScaleBins(1.0);\n    const x = xScaleBins(1.0) + (xScaleBins(bins[0].x1) - xScaleBins(bins[0].x0)) / 2;\n    barGroup.append('line').attr('class', perRunClass).style('stroke', 'black').style('strokewidth', '15').attr('x1', x).attr('y1', boundedHeight).attr('x2', x).attr('y2', 0);\n  };\n\n  const createBins = () => {\n    const thresholdValues = getThresholdValues();\n    const binFunc = d3.bin().value(function (d) {\n      return d.pctOfStart;\n    }).domain([thresholdValues[0], thresholdValues[thresholdValues.length - 1]]).thresholds(thresholdValues);\n    return binFunc(props.metadata);\n  };\n\n  const drawAreaChart = svg => {\n    const bins = createBins();\n    const xScale = getXScaleForAxis();\n    const yScale = d3.scaleLinear().domain([0, d3.max(bins, function (d) {\n      return d.length;\n    })]).range([boundedHeight, 0]);\n    svg.append(\"g\").attr(\"class\", perRunClass).attr(\"transform\", \"translate(0,\" + boundedHeight + \")\").call(d3.axisBottom(xScale));\n    svg.append(\"g\").attr(\"class\", perRunClass).call(d3.axisLeft(yScale)); // draw the histogram bars \n\n    var pathGroup = svg.append('g').attr('class', perRunClass).attr('id', pathGroupID);\n    drawReferenceRects(bins, pathGroup, xScale);\n    drawReferenceLines(bins, pathGroup, xScale);\n    pathGroup.append(\"path\").datum(bins).style('fill-opacity', '0.1').attr('class', perRunClass).attr(\"fill\", \"Grey\").attr(\"stroke\", 'Blue').attr(\"stroke-width\", 1.5).attr(\"d\", d3.area().x(d => xScale(d.x0 + (d.x1 - d.x0) / 2)).y0(yScale(0)).y1(d => yScale(d.length)).curve(d3.curveBasis));\n  };\n\n  const drawHistogram = svg => {\n    const bins = createBins();\n    const xScaleBins = getXScaleForAxis();\n    const yScaleBins = d3.scaleLinear().domain([0, d3.max(bins, function (d) {\n      return d.length;\n    })]).range([boundedHeight, 0]);\n    svg.append(\"g\").attr(\"class\", perRunClass).attr(\"transform\", \"translate(0,\" + boundedHeight + \")\").call(d3.axisBottom(xScaleBins));\n    svg.append(\"g\").attr(\"class\", perRunClass).call(d3.axisLeft(yScaleBins)); // draw the histogram bars \n\n    var barGroup = svg.append('g').attr('class', perRunClass).attr('id', barGroupID); // draw the reference rects (startValue, reds/greens)\n\n    drawReferenceRects(bins, barGroup, xScaleBins);\n    var bars = barGroup.selectAll('.' + histoBarClass);\n    bars.data(bins).enter().append(\"rect\").attr(\"class\", perRunClass).attr(\"x\", 1).attr(\"transform\", function (d) {\n      return \"translate(\" + xScaleBins(d.x0) + \",\" + yScaleBins(d.length) + \")\";\n    }).attr(\"width\", function (d) {\n      return xScaleBins(d.x1) - xScaleBins(d.x0) - 1;\n    }).attr(\"height\", function (d) {\n      return boundedHeight - yScaleBins(d.length);\n    }).style(\"fill\", \"SteelBlue\").on(\"mouseover\", handleMouseOver).on(\"mouseout\", handleMouseLeave).on('mousemove', handleMouseMove);\n  };\n\n  const prepTooltip = svg => {\n    // wrapper\n    // background\n    // text element\n    //  tspan for each line\n    //  x0, x1, % of start, % of results\n    const tooltipWrapper = svg.append('g').attr('id', ttBinWrapID).attr(\"class\", perRunClass).style('opacity', 0);\n    tooltipWrapper.append('rect').style('opacity', 0.70).attr('id', ttBinBackID).attr('width', tooltipWidth).attr('height', tooltipHeight).attr(\"pointer-events\", \"none\").attr(\"fill\", \"#e8e8e8\");\n    const tooltipText = tooltipWrapper.append('g').append('text').attr(\"pointer-events\", \"none\").attr('font-weight', 900).attr('text-anchor', 'left');\n    tooltipText.append('tspan').attr('id', ttBinRangeID).attr('x', '5').attr('y', '5').attr('dy', '15px').attr(\"pointer-events\", \"none\");\n    tooltipText.append('tspan').attr('id', ttBinPctID).attr('x', '5').attr('y', '5').attr('dy', '30px').attr(\"pointer-events\", \"none\");\n  };\n\n  const makeCurrency = num => {\n    let dollarUSLocale = Intl.NumberFormat('en-US', {\n      style: \"currency\",\n      currency: \"USD\"\n    });\n    return dollarUSLocale.format(num);\n  };\n\n  const makePct = num => {\n    return Number(num * 100).toFixed(2) + '%';\n  };\n\n  const getTooltip = () => {\n    return d3.select('#' + ttBinWrapID);\n  };\n\n  const getTooltipBackground = () => {\n    return d3.select('#' + ttBinBackID);\n  };\n\n  const getBinRangeSpan = () => {\n    return d3.select('#' + ttBinRangeID);\n  };\n\n  const getBinPctSpan = () => {\n    return d3.select('#' + ttBinPctID);\n  };\n\n  const handleMouseOver = e => {\n    getTooltip().style('opacity', 1);\n  };\n\n  const handleMouseMove = e => {\n    const binData = e.srcElement.__data__;\n    const binMeta = calcBinMetadata(binData); // set the tt content\n\n    const tt = getTooltip();\n    const rangeString = makeCurrency(+binMeta.extBin[0]) + '-' + makeCurrency(+binMeta.extBin[1]);\n    const binSizeString = ' ' + makePct(binData.length / props.metadata.length) + ' of cycles';\n    getBinRangeSpan().text(rangeString);\n    getBinPctSpan().text(binSizeString); // place the tt\n\n    const ttBounds = tt.node().getBBox();\n    getTooltipBackground().attr('width', ttBounds.width).attr('height', ttBounds.height);\n  };\n\n  const handleMouseLeave = () => {\n    getTooltip().style('opacity', 0);\n  };\n\n  React.useEffect(() => {\n    const svg = d3.select(svgSelect).append(\"g\").attr(\"transform\", marginTranslate);\n    cleanupPrev(svg); // drawHistogram(svg);\n\n    drawAreaChart(svg);\n    prepTooltip(svg);\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: svgID,\n      width: totalWidth,\n      height: totalHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EndValueChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = EndValueChart;\n;\nexport default EndValueChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"EndValueChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js"],"names":["React","d3","getHighValueColorString","getLowValueColorString","getThresholdValues","EndValueChart","props","svgID","svgSelect","perRunClass","histoBarClass","areaClass","barGroupID","pathGroupID","margin","top","right","bottom","left","totalWidth","totalHeight","marginTranslate","boundedWidth","boundedHeight","ttBinWrapID","ttBinBackID","ttBinRangeID","ttBinPctID","tooltipWidth","tooltipHeight","cleanupPrev","svg","perRunSelect","selectAll","remove","getXScaleForAxis","thresholdValues","numThresholds","length","thresholdRange","thresholdInc","i","scaleThreshold","domain","range","calcBinMetadata","data","oneBinMetadata","extent","d","adjEndCycleValue","pctOfStart","drawReferenceRects","bins","parent","xScaleBins","lowValueColorString","highValueColorString","refRectOpacity","xForOne","width","x1","x0","append","attr","style","drawReferenceLines","x","barGroup","createBins","binFunc","bin","value","thresholds","metadata","drawAreaChart","xScale","yScale","scaleLinear","max","call","axisBottom","axisLeft","pathGroup","datum","area","y0","y1","curve","curveBasis","drawHistogram","yScaleBins","bars","enter","on","handleMouseOver","handleMouseLeave","handleMouseMove","prepTooltip","tooltipWrapper","tooltipText","makeCurrency","num","dollarUSLocale","Intl","NumberFormat","currency","format","makePct","Number","toFixed","getTooltip","select","getTooltipBackground","getBinRangeSpan","getBinPctSpan","e","binData","srcElement","__data__","binMeta","tt","rangeString","extBin","binSizeString","text","ttBounds","node","getBBox","height","useEffect"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as d3 from \"d3\";\nimport './common.js';\nimport { getHighValueColorString, getLowValueColorString, getThresholdValues } from \"./common.js\";\n\nfunction EndValueChart (props) {\n\n    const svgID = 'endvaluechartsvg';\n    const svgSelect = '#' + svgID;\n    const perRunClass = 'perrunevdata';\n    const histoBarClass = 'histobar';\n    const areaClass = 'areaclass';\n    const barGroupID = 'bargroup';\n    const pathGroupID = 'pathgroupid';\n    const margin = { top: 40, right: 65, bottom: 40, left: 65 };\n    const totalWidth = 960;\n    const totalHeight = 300;\n    const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n    const boundedWidth = totalWidth - margin.left - margin.right;\n    const boundedHeight = totalHeight - margin.top - margin.bottom;\n    const ttBinWrapID = 'ttevwrap';\n    const ttBinBackID = 'ttevback';\n    const ttBinRangeID = 'ttevrange';\n    const ttBinPctID = 'ttevpct';\n    const tooltipWidth = 75;\n    const tooltipHeight = 75;\n\n    const cleanupPrev = (svg) => {\n        const perRunSelect = '.' + perRunClass;\n        d3.selectAll(perRunSelect).remove();\n    }\n\n    const getXScaleForAxis = () => {\n        const thresholdValues = getThresholdValues();\n        const numThresholds = thresholdValues.length;\n        var thresholdRange = [];\n        var thresholdInc = boundedWidth / (numThresholds + 1);\n\n        for (var i = 0; i <= thresholdValues.length; i++) {\n            thresholdRange[i] = i * thresholdInc;\n        }\n\n        return d3.scaleThreshold()\n                 .domain(thresholdValues)\n                 .range(thresholdRange);\n    }\n\n    const calcBinMetadata = (data) => {\n        const oneBinMetadata = {\n            'binData': data,\n            'extBin': d3.extent(data, (d) => d.adjEndCycleValue),\n            'extPctStartValue': d3.extent(data, (d) => d.pctOfStart),\n            'binCount': data.length,\n        }\n\n        return oneBinMetadata;\n    }\n\n    const drawReferenceRects = (bins, parent, xScaleBins) => {\n        const lowValueColorString = getLowValueColorString();\n        const highValueColorString = getHighValueColorString();\n        const refRectOpacity = '0.25';\n        const xForOne = xScaleBins(1.0);\n        const width = ((xScaleBins(bins[0].x1) - xScaleBins(bins[0].x0)));\n\n        // startValue reference rect\n        parent.append('rect')\n              .attr('class', perRunClass)\n              .style('opacity', refRectOpacity)\n              .attr('x', xForOne)\n              .attr('y', 0)\n              .attr('width', width)\n              .attr('height', boundedHeight);\n        // failures and \n        // low end value reference rect\n        parent.append('rect')\n              .attr('class', perRunClass)\n              .style('opacity', refRectOpacity)\n              .attr('fill', lowValueColorString)\n              .attr('x', 0)\n              .attr('y', 0)\n              .attr('width', xForOne)\n              .attr('height', boundedHeight);\n        // high value reference rect\n        parent.append('rect')\n              .attr('class', perRunClass)\n              .style('opacity', refRectOpacity)\n              .attr('fill', highValueColorString)\n              .attr('x', xForOne + width)\n              .attr('y', 0)\n              .attr('width', boundedWidth - xForOne - width)\n              .attr('height', boundedHeight);\n    }\n\n    const drawReferenceLines = (bins, parent, xScaleBins) => {\n\n        const xForOne = xScaleBins(1.0);\n        const x = xScaleBins(1.0) + ((xScaleBins(bins[0].x1) - xScaleBins(bins[0].x0)) / 2);\n        barGroup.append('line')\n                .attr('class', perRunClass)\n                .style('stroke', 'black')\n                .style('strokewidth', '15')\n                .attr('x1', x)\n                .attr('y1', boundedHeight)\n                .attr('x2', x)\n                .attr('y2', 0);\n    }\n\n    const createBins = () => {\n        const thresholdValues = getThresholdValues();\n        const binFunc = d3.bin()\n                          .value(function(d) { return d.pctOfStart; })   \n                          .domain([thresholdValues[0], thresholdValues[thresholdValues.length - 1]])\n                          .thresholds(thresholdValues); \n\n        return binFunc(props.metadata);\n    }\n\n    const drawAreaChart = (svg) => {\n        \n        const bins = createBins();\n        const xScale = getXScaleForAxis();\n        const yScale = d3.scaleLinear()\n                         .domain([0, d3.max(bins, function(d) { return d.length; })])\n                         .range([boundedHeight, 0]);\n\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .attr(\"transform\", \"translate(0,\" + boundedHeight + \")\")\n            .call(d3.axisBottom(xScale));\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .call(d3.axisLeft(yScale));\n             \n        // draw the histogram bars \n        var pathGroup = svg.append('g')\n                           .attr('class', perRunClass)\n                           .attr('id', pathGroupID);\n\n        drawReferenceRects(bins, pathGroup, xScale);   \n        drawReferenceLines(bins, pathGroup, xScale); \n        \n        pathGroup.append(\"path\")\n                    .datum(bins)\n                    .style('fill-opacity', '0.1')\n                    .attr('class', perRunClass)\n                    .attr(\"fill\", \"Grey\")\n                    .attr(\"stroke\", 'Blue')\n                    .attr(\"stroke-width\", 1.5)\n                    .attr(\"d\", d3.area()\n                        .x(d => xScale(d.x0 + ((d.x1-d.x0) / 2)))\n                        .y0(yScale(0))\n                        .y1(d => yScale(d.length))\n                        .curve(d3.curveBasis)\n                );          \n    }\n\n    const drawHistogram = (svg) => {\n        \n        const bins = createBins();\n        const xScaleBins = getXScaleForAxis();\n        const yScaleBins = d3.scaleLinear()\n                             .domain([0, d3.max(bins, function(d) { return d.length; })])\n                             .range([boundedHeight, 0]);\n\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .attr(\"transform\", \"translate(0,\" + boundedHeight + \")\")\n            .call(d3.axisBottom(xScaleBins));\n        svg.append(\"g\")\n           .attr(\"class\", perRunClass)\n           .call(d3.axisLeft(yScaleBins));\n\n        // draw the histogram bars \n        var barGroup = svg.append('g')\n                          .attr('class', perRunClass)\n                          .attr('id', barGroupID);\n\n        // draw the reference rects (startValue, reds/greens)\n        drawReferenceRects(bins, barGroup, xScaleBins);\n\n        var bars = barGroup.selectAll('.' + histoBarClass);\n        bars.data(bins)\n           .enter()\n           .append(\"rect\")\n                .attr(\"class\", perRunClass)\n                .attr(\"x\", 1)\n                .attr(\"transform\", function(d) { return \"translate(\" + xScaleBins(d.x0) + \",\" + yScaleBins(d.length) + \")\"; })\n                .attr(\"width\", function(d) { return xScaleBins(d.x1) - xScaleBins(d.x0) -1 ; })\n                .attr(\"height\", function(d) { return boundedHeight - yScaleBins(d.length); })\n                .style(\"fill\", \"SteelBlue\")\n                .on(\"mouseover\", handleMouseOver)\n                .on(\"mouseout\", handleMouseLeave)                \n                .on('mousemove', handleMouseMove);\n    }\n\n    const prepTooltip = (svg) => {\n        // wrapper\n        // background\n        // text element\n        //  tspan for each line\n        //  x0, x1, % of start, % of results\n\n        const tooltipWrapper = svg.append('g')\n                                  .attr('id', ttBinWrapID)\n                                  .attr(\"class\", perRunClass)\n                                  .style('opacity', 0);\n        tooltipWrapper.append('rect')\n                      .style('opacity', 0.70)\n                      .attr('id', ttBinBackID)\n                      .attr('width', tooltipWidth)\n                      .attr('height', tooltipHeight)\n                      .attr(\"pointer-events\", \"none\")\n                      .attr(\"fill\", \"#e8e8e8\"); \n\n        const tooltipText = tooltipWrapper.append('g').append('text')\n                                          .attr(\"pointer-events\", \"none\")\n                                          .attr('font-weight', 900)\n                                          .attr('text-anchor', 'left');\n        tooltipText.append('tspan')\n                   .attr('id', ttBinRangeID)\n                   .attr('x', '5')\n                   .attr('y', '5')\n                   .attr('dy', '15px')\n                   .attr(\"pointer-events\", \"none\");\n        tooltipText.append('tspan')\n                   .attr('id', ttBinPctID)\n                   .attr('x', '5')\n                   .attr('y', '5')\n                   .attr('dy', '30px')\n                   .attr(\"pointer-events\", \"none\");\n    }\n\n    const makeCurrency = (num) => {\n        let dollarUSLocale = Intl.NumberFormat('en-US', {\n            style: \"currency\",\n            currency: \"USD\",\n        });\n        return dollarUSLocale.format(num);\n    }\n\n    const makePct = (num) => {\n        return Number( num * 100).toFixed(2) + '%';\n    }\n\n    const getTooltip = () => {\n        return d3.select('#' + ttBinWrapID);\n    }\n\n    const getTooltipBackground = () => {\n        return d3.select('#' + ttBinBackID);\n    }\n\n    const getBinRangeSpan = () => {\n        return d3.select('#' + ttBinRangeID);\n    }\n\n    const getBinPctSpan = () => {\n        return d3.select('#' + ttBinPctID);\n    }\n\n    const handleMouseOver = (e) => {\n        getTooltip().style('opacity', 1);\n    }\n\n    const handleMouseMove = (e) => {\n        const binData = e.srcElement.__data__;\n        const binMeta = calcBinMetadata(binData);\n        \n        // set the tt content\n        const tt = getTooltip();\n\n        const rangeString = makeCurrency(+(binMeta.extBin[0])) + \n                            '-' + makeCurrency(+(binMeta.extBin[1]));\n        const binSizeString = ' ' + makePct(binData.length / props.metadata.length) +\n                              ' of cycles';\n        getBinRangeSpan().text(rangeString);\n        getBinPctSpan().text(binSizeString);\n\n        // place the tt\n        const ttBounds = tt.node().getBBox();\n        getTooltipBackground()                \n            .attr('width', ttBounds.width)\n            .attr('height', ttBounds.height);\n    };\n    \n    const handleMouseLeave = () => {\n        getTooltip().style('opacity', 0);\n    };\n\n    React.useEffect(() => {\n\n        const svg = d3.select(svgSelect)\n                      .append(\"g\")\n                      .attr(\"transform\", marginTranslate);\n\n        cleanupPrev(svg);\n        // drawHistogram(svg);\n        drawAreaChart(svg);\n        prepTooltip(svg);\n    }, [props] );\n\n    return (\n        <div>\n            <svg id={svgID}  \n                width={totalWidth}\n                height={totalHeight} \n             >\n            </svg>\n        </div>\n    );\n};\n\nexport default EndValueChart;\n"]},"metadata":{},"sourceType":"module"}