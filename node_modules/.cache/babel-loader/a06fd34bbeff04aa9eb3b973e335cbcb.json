{"ast":null,"code":"import * as d3 from \"d3\";\nconst perRunClass = 'perrundata';\nconst failureColorString = 'Crimson';\nconst lowValueColorString = 'PeachPuff';\nconst highValueColorString = 'ForestGreen';\nconst maxValueColorString = 'DarkGreen';\nconst midValueColorString = 'DarkKhaki';\nconst portfolioLineClass = 'portfolioline';\nconst startValueMargin = 0.5;\nconst thresholdValues = [0, 1 - startValueMargin, 1 + startValueMargin, 2, 5, 20];\nexport const cleanupPrev = () => {\n  const perRunSelect = '.' + perRunClass;\n  d3.selectAll(perRunSelect).remove();\n};\nexport const getPerRunClassName = () => {\n  return perRunClass;\n};\nexport const getFailureColorString = () => {\n  return failureColorString;\n};\nexport const getLowValueColorString = () => {\n  return lowValueColorString;\n};\nexport const getHighValueColorString = () => {\n  return highValueColorString;\n};\nexport const getMaxValueColorString = () => {\n  return maxValueColorString;\n};\nexport const getMidValueColorString = () => {\n  return midValueColorString;\n};\nexport const getThresholdValues = () => {\n  return thresholdValues;\n};\nexport const getColorStringForRelativeValue = ratioValue => {\n  var retValue = midValueColorString;\n\n  if (0 >= ratioValue) {\n    retValue = getFailureColorString();\n  } else if (ratioValue < 1 - startValueMargin) {\n    retValue = getLowValueColorString();\n  } else if (ratioValue >= 1 + startValueMargin) {\n    if (ratioValue >= thresholdValues[thresholdValues.length - 2]) {\n      retValue = getMaxValueColorString();\n    } else {\n      retValue = getHighValueColorString();\n    }\n  }\n\n  return retValue;\n};\nexport const findByID = elementID => {\n  const selectID = '#' + elementID;\n  return d3.select(selectID);\n};","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/common.js"],"names":["d3","perRunClass","failureColorString","lowValueColorString","highValueColorString","maxValueColorString","midValueColorString","portfolioLineClass","startValueMargin","thresholdValues","cleanupPrev","perRunSelect","selectAll","remove","getPerRunClassName","getFailureColorString","getLowValueColorString","getHighValueColorString","getMaxValueColorString","getMidValueColorString","getThresholdValues","getColorStringForRelativeValue","ratioValue","retValue","length","findByID","elementID","selectID","select"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAEA,MAAMC,WAAW,GAAG,YAApB;AACA,MAAMC,kBAAkB,GAAG,SAA3B;AACA,MAAMC,mBAAmB,GAAG,WAA5B;AACA,MAAMC,oBAAoB,GAAG,aAA7B;AACA,MAAMC,mBAAmB,GAAG,WAA5B;AACA,MAAMC,mBAAmB,GAAG,WAA5B;AACA,MAAMC,kBAAkB,GAAG,eAA3B;AACA,MAAMC,gBAAgB,GAAG,GAAzB;AACA,MAAMC,eAAe,GAAG,CAAC,CAAD,EAAI,IAAID,gBAAR,EAA0B,IAAIA,gBAA9B,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,EAAtD,CAAxB;AAEA,OAAO,MAAME,WAAW,GAAG,MAAM;AAC7B,QAAMC,YAAY,GAAG,MAAMV,WAA3B;AACAD,EAAAA,EAAE,CAACY,SAAH,CAAaD,YAAb,EAA2BE,MAA3B;AACH,CAHM;AAKP,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AACpC,SAAOb,WAAP;AACH,CAFM;AAIP,OAAO,MAAMc,qBAAqB,GAAG,MAAM;AACvC,SAAOb,kBAAP;AACH,CAFM;AAIP,OAAO,MAAMc,sBAAsB,GAAG,MAAM;AACxC,SAAOb,mBAAP;AACH,CAFM;AAIP,OAAO,MAAMc,uBAAuB,GAAG,MAAM;AACzC,SAAOb,oBAAP;AACH,CAFM;AAIP,OAAO,MAAMc,sBAAsB,GAAG,MAAM;AACxC,SAAOb,mBAAP;AACH,CAFM;AAIP,OAAO,MAAMc,sBAAsB,GAAG,MAAM;AACxC,SAAOb,mBAAP;AACH,CAFM;AAIP,OAAO,MAAMc,kBAAkB,GAAG,MAAM;AACpC,SAAOX,eAAP;AACH,CAFM;AAIP,OAAO,MAAMY,8BAA8B,GAAIC,UAAD,IAAgB;AAC1D,MAAIC,QAAQ,GAAGjB,mBAAf;;AAEA,MAAI,KAAKgB,UAAT,EAAqB;AACjBC,IAAAA,QAAQ,GAAGR,qBAAqB,EAAhC;AACH,GAFD,MAGK,IAAIO,UAAU,GAAI,IAAId,gBAAtB,EAAyC;AAC1Ce,IAAAA,QAAQ,GAAGP,sBAAsB,EAAjC;AACH,GAFI,MAGA,IAAIM,UAAU,IAAK,IAAId,gBAAvB,EAA0C;AAC3C,QAAIc,UAAU,IAAKb,eAAe,CAACA,eAAe,CAACe,MAAhB,GAAuB,CAAxB,CAAlC,EAA+D;AAC3DD,MAAAA,QAAQ,GAAGL,sBAAsB,EAAjC;AACH,KAFD,MAGK;AACDK,MAAAA,QAAQ,GAAGN,uBAAuB,EAAlC;AACH;AACJ;;AAED,SAAOM,QAAP;AACH,CAnBM;AAqBP,OAAO,MAAME,QAAQ,GAAIC,SAAD,IAAe;AACnC,QAAMC,QAAQ,GAAG,MAAMD,SAAvB;AACA,SAAO1B,EAAE,CAAC4B,MAAH,CAAUD,QAAV,CAAP;AACH,CAHM","sourcesContent":["import * as d3 from \"d3\";\n\nconst perRunClass = 'perrundata';\nconst failureColorString = 'Crimson';\nconst lowValueColorString = 'PeachPuff';\nconst highValueColorString = 'ForestGreen';\nconst maxValueColorString = 'DarkGreen';\nconst midValueColorString = 'DarkKhaki';\nconst portfolioLineClass = 'portfolioline';\nconst startValueMargin = 0.5;\nconst thresholdValues = [0, 1 - startValueMargin, 1 + startValueMargin, 2, 5, 20];\n\nexport const cleanupPrev = () => {\n    const perRunSelect = '.' + perRunClass;\n    d3.selectAll(perRunSelect).remove();\n}\n\nexport const getPerRunClassName = () => {\n    return perRunClass;\n}\n\nexport const getFailureColorString = () => {\n    return failureColorString;\n}\n\nexport const getLowValueColorString = () => {\n    return lowValueColorString;\n}\n\nexport const getHighValueColorString = () => {\n    return highValueColorString;\n}\n\nexport const getMaxValueColorString = () => {\n    return maxValueColorString;\n}\n\nexport const getMidValueColorString = () => {\n    return midValueColorString;\n}\n\nexport const getThresholdValues = () => {\n    return thresholdValues;\n}\n\nexport const getColorStringForRelativeValue = (ratioValue) => {\n    var retValue = midValueColorString;\n\n    if (0 >= ratioValue) {\n        retValue = getFailureColorString();\n    }\n    else if (ratioValue < (1 - startValueMargin)) {\n        retValue = getLowValueColorString();\n    }\n    else if (ratioValue >= (1 + startValueMargin)) {\n        if (ratioValue >= (thresholdValues[thresholdValues.length-2])) {\n            retValue = getMaxValueColorString();\n        }\n        else {\n            retValue = getHighValueColorString();\n        }\n    }\n\n    return retValue;\n}\n\nexport const findByID = (elementID) => {\n    const selectID = '#' + elementID;\n    return d3.select(selectID);\n}"]},"metadata":{},"sourceType":"module"}