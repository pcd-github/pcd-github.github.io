{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EndValueChart(props) {\n  _s();\n\n  const svgID = 'endvaluechartsvg';\n  const perRunClass = 'perrundata';\n  const margin = {\n    top: 40,\n    right: 65,\n    bottom: 40,\n    left: 65\n  };\n  const totalWidth = 960;\n  const totalHeight = 300;\n  const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n  const boundedWidth = totalWidth - margin.left - margin.right;\n  const boundedHeight = totalHeight - margin.top - margin.bottom;\n\n  const getXScale = () => {\n    var xExt = [props.minendvalue, props.maxendvalue];\n    return d3.scaleLinear().domain(xExt).range([0, boundedWidth]);\n  };\n\n  const drawHistogram = svg => {\n    const xScaleBins = getXScale();\n    const binFunc = d3.bin().value(function (d) {\n      return d.adjEndCycleValue;\n    }) // I need to give the vector of value\n    .domain(xScaleBins.domain()) // then the domain of the graphic\n    .thresholds(xScaleBins.ticks(10)); // then the numbers of bins\n\n    const bins = binFunc(props.metadata);\n    const yScaleBins = d3.scaleLinear().range([boundedHeight, 0]);\n    yScaleBins.domain([0, d3.max(bins, function (d) {\n      return d.length;\n    })]);\n    svg.append(\"g\").attr(\"class\", perRunClass).attr(\"transform\", \"translate(0,\" + boundedHeight + \")\").call(d3.axisBottom(xScaleBins));\n    svg.append(\"g\").attr(\"class\", perRunClass).call(d3.axisLeft(yScaleBins)); // Add the area\n\n    svg.append(\"path\").datum(bins).attr(\"fill\", \"#cce5df\").attr(\"stroke\", \"#69b3a2\").attr(\"stroke-width\", 4.5).attr(\"d\", d3.area().x(function (d) {\n      return xScaleBins(d.adjEndCycleValue);\n    }).y0(yScaleBins(0)).y1(function (d) {\n      return yScaleBins(d.height);\n    }));\n  };\n\n  React.useEffect(() => {\n    const svgSelect = '#' + svgID;\n    const svg = d3.select(svgSelect).append(\"g\").attr(\"transform\", marginTranslate);\n    drawHistogram(svg); // console.log('endvaluechart effect');\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: svgID,\n      width: totalWidth,\n      height: totalHeight,\n      children: /*#__PURE__*/_jsxDEV(\"rect\", {\n        style: {\n          opacity: 0\n        },\n        width: boundedWidth,\n        height: boundedHeight,\n        transform: marginTranslate,\n        fill: \"LightGrey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EndValueChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = EndValueChart;\n;\nexport default EndValueChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"EndValueChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js"],"names":["React","d3","useState","EndValueChart","props","svgID","perRunClass","margin","top","right","bottom","left","totalWidth","totalHeight","marginTranslate","boundedWidth","boundedHeight","getXScale","xExt","minendvalue","maxendvalue","scaleLinear","domain","range","drawHistogram","svg","xScaleBins","binFunc","bin","value","d","adjEndCycleValue","thresholds","ticks","bins","metadata","yScaleBins","max","length","append","attr","call","axisBottom","axisLeft","datum","area","x","y0","y1","height","useEffect","svgSelect","select","opacity"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as d3 from \"d3\";\nimport {useState} from \"react\";\n\nfunction EndValueChart (props) {\n\n    const svgID = 'endvaluechartsvg';\n    const perRunClass = 'perrundata';\n    const margin = { top: 40, right: 65, bottom: 40, left: 65 };\n    const totalWidth = 960;\n    const totalHeight = 300;\n    const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n    const boundedWidth = totalWidth - margin.left - margin.right;\n    const boundedHeight = totalHeight - margin.top - margin.bottom;\n\n    const getXScale = () => { \n        var xExt = [props.minendvalue, props.maxendvalue];\n        return d3.scaleLinear()\n                    .domain(xExt)\n                    .range([ 0, boundedWidth ]);\n    }\n\n    const drawHistogram = (svg) => {\n        const xScaleBins = getXScale();\n        const binFunc = d3.bin()\n                          .value(function(d) { return d.adjEndCycleValue; })   // I need to give the vector of value\n                          .domain(xScaleBins.domain())  // then the domain of the graphic\n                          .thresholds(xScaleBins.ticks(10)); // then the numbers of bins\n        const bins = binFunc(props.metadata);\n        const yScaleBins = d3.scaleLinear()\n                             .range([boundedHeight, 0]);\n        yScaleBins.domain([0, d3.max(bins, function(d) { return d.length; })]);\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .attr(\"transform\", \"translate(0,\" + boundedHeight + \")\")\n            .call(d3.axisBottom(xScaleBins));\n        svg.append(\"g\")\n           .attr(\"class\", perRunClass)\n           .call(d3.axisLeft(yScaleBins));\n\n        // Add the area\n        svg.append(\"path\")\n            .datum(bins)\n            .attr(\"fill\", \"#cce5df\")\n            .attr(\"stroke\", \"#69b3a2\")\n            .attr(\"stroke-width\", 4.5)\n            .attr(\"d\", d3.area()\n                .x(function(d) { return xScaleBins(d.adjEndCycleValue) })\n                .y0(yScaleBins(0))\n                .y1(function(d) { return yScaleBins(d.height) })\n                )\n        \n\n    }\n\n    React.useEffect(() => {\n\n        const svgSelect = '#' + svgID;\n        const svg = d3.select(svgSelect)\n                      .append(\"g\")\n                      .attr(\"transform\", marginTranslate);\n\n        drawHistogram(svg);\n        // console.log('endvaluechart effect');\n    }, [props] );\n\n    return (\n        <div>\n            <svg id={svgID}  \n                width={totalWidth}\n                height={totalHeight} \n             >\n                <rect\n                    style={{ opacity:0 }}\n                    width={boundedWidth}\n                    height={boundedHeight}\n                    transform={marginTranslate}\n                    fill='LightGrey'\n                 >\n\n                </rect>\n            </svg>\n        </div>\n    );\n};\n\nexport default EndValueChart;\n"]},"metadata":{},"sourceType":"module"}