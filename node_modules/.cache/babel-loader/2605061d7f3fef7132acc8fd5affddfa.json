{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EndValueChart(props) {\n  _s();\n\n  const maxPctOfStartState = props.maxendvalue / props.startvalue;\n  const svgID = 'endvaluechartsvg';\n  const perRunClass = 'perrunevdata';\n  const margin = {\n    top: 40,\n    right: 65,\n    bottom: 40,\n    left: 65\n  };\n  const totalWidth = 960;\n  const totalHeight = 300;\n  const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n  const boundedWidth = totalWidth - margin.left - margin.right;\n  const boundedHeight = totalHeight - margin.top - margin.bottom;\n  const thresholdValues = [0, 0.25, 0.50, 1.0, 2.0, 3.0, 10.0];\n\n  const cleanupPrev = svg => {\n    const perRunSelect = '.' + perRunClass;\n    var selected = d3.selectAll(perRunSelect);\n    selected.remove();\n  };\n\n  const getXScale = () => {\n    const numThresholdValues = thresholdValues.length;\n    const perValRangeIncr = boundedWidth / numThresholdValues;\n    var rangeValues = [];\n\n    for (var i = 0; i < numThresholdValues; i++) {\n      rangeValues[i] = i * perValRangeIncr;\n    }\n\n    return d3.scaleLinear().domain(0, 12).range(0, boundedWidth);\n  };\n\n  const drawHistogram = svg => {\n    cleanupPrev(svg);\n    const xScaleBins = getXScale();\n    const binFunc = d3.bin().value(function (d) {\n      return d.pctOfStart;\n    }).domain(xScaleBins.domain()) // .thresholds(xScaleBins.ticks(25)); \n    .thresholds(thresholdValues);\n    const bins = binFunc(props.metadata);\n    const yScaleBins = d3.scaleLinear().range([boundedHeight, 0]);\n    yScaleBins.domain([0, d3.max(bins, function (d) {\n      return d.length;\n    })]);\n    svg.append(\"g\").attr(\"class\", perRunClass).attr(\"transform\", \"translate(0,\" + boundedHeight + \")\").call(d3.axisBottom(xScaleBins));\n    svg.append(\"g\").attr(\"class\", perRunClass).call(d3.axisLeft(yScaleBins));\n    svg.selectAll(\"rect\").data(bins).enter().append(\"rect\").attr(\"class\", perRunClass).attr(\"x\", 1).attr(\"transform\", function (d) {\n      return \"translate(\" + xScaleBins(d.x0) + \",\" + yScaleBins(d.length) + \")\";\n    }).attr(\"width\", function (d) {\n      return xScaleBins(d.x1) - xScaleBins(d.x0) - 1;\n    }).attr(\"height\", function (d) {\n      return boundedHeight - yScaleBins(d.length);\n    }).style(\"fill\", \"#69b3a2\");\n    /*\n    // Add the area\n    svg.append(\"path\")\n     .datum(bins)\n     .attr(\"class\", perRunClass)\n     .attr(\"fill\", \"#cce5df\")\n     .attr(\"stroke\", \"#69b3a2\")\n     .attr(\"stroke-width\", 4.5)\n     .attr(\"d\", d3.area()\n         .x(function(d) { return xScaleBins((d.x1 + d.x0) / 2) })\n         .y0(yScaleBins(0))\n         .y1(function(d) { return yScaleBins(d.length) })\n         );\n                         */\n  };\n\n  React.useEffect(() => {\n    const svgSelect = '#' + svgID;\n    const svg = d3.select(svgSelect).append(\"g\").attr(\"transform\", marginTranslate);\n    drawHistogram(svg); // console.log('endvaluechart effect');\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: svgID,\n      width: totalWidth,\n      height: totalHeight,\n      children: /*#__PURE__*/_jsxDEV(\"rect\", {\n        style: {\n          opacity: 0\n        },\n        width: boundedWidth,\n        height: boundedHeight,\n        transform: marginTranslate,\n        fill: \"LightGrey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EndValueChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = EndValueChart;\n;\nexport default EndValueChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"EndValueChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js"],"names":["React","d3","useState","EndValueChart","props","maxPctOfStartState","maxendvalue","startvalue","svgID","perRunClass","margin","top","right","bottom","left","totalWidth","totalHeight","marginTranslate","boundedWidth","boundedHeight","thresholdValues","cleanupPrev","svg","perRunSelect","selected","selectAll","remove","getXScale","numThresholdValues","length","perValRangeIncr","rangeValues","i","scaleLinear","domain","range","drawHistogram","xScaleBins","binFunc","bin","value","d","pctOfStart","thresholds","bins","metadata","yScaleBins","max","append","attr","call","axisBottom","axisLeft","data","enter","x0","x1","style","useEffect","svgSelect","select","opacity"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as d3 from \"d3\";\nimport {useState} from \"react\";\n\nfunction EndValueChart (props) {\n\n    const maxPctOfStartState = props.maxendvalue / props.startvalue;\n    const svgID = 'endvaluechartsvg';\n    const perRunClass = 'perrunevdata';\n    const margin = { top: 40, right: 65, bottom: 40, left: 65 };\n    const totalWidth = 960;\n    const totalHeight = 300;\n    const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n    const boundedWidth = totalWidth - margin.left - margin.right;\n    const boundedHeight = totalHeight - margin.top - margin.bottom;\n    const thresholdValues = [0, 0.25, 0.50, 1.0, 2.0, 3.0, 10.0]\n\n    const cleanupPrev = (svg) => {\n        const perRunSelect = '.' + perRunClass;\n        var selected = d3.selectAll(perRunSelect)\n        selected.remove();\n    }\n\n    const getXScale = () => { \n        const numThresholdValues = thresholdValues.length;\n        const perValRangeIncr = boundedWidth / numThresholdValues;\n        var rangeValues = [];\n\n        for (var i = 0; i < numThresholdValues; i++) {\n            rangeValues[i] = i * perValRangeIncr;\n        }\n        return d3.scaleLinear()\n                    .domain(0, 12)\n                    .range(0, boundedWidth);\n    }\n\n    const drawHistogram = (svg) => {\n        \n        cleanupPrev(svg);\n\n        const xScaleBins = getXScale();\n        const binFunc = d3.bin()\n                          .value(function(d) { return d.pctOfStart; })   \n                          .domain(xScaleBins.domain())  \n                          // .thresholds(xScaleBins.ticks(25)); \n                          .thresholds(thresholdValues); \n        const bins = binFunc(props.metadata);\n        const yScaleBins = d3.scaleLinear()\n                             .range([boundedHeight, 0]);\n        yScaleBins.domain([0, d3.max(bins, function(d) { return d.length; })]);\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .attr(\"transform\", \"translate(0,\" + boundedHeight + \")\")\n            .call(d3.axisBottom(xScaleBins));\n        svg.append(\"g\")\n           .attr(\"class\", perRunClass)\n           .call(d3.axisLeft(yScaleBins));\n\n\n           svg.selectAll(\"rect\")\n              .data(bins)\n              .enter()\n              .append(\"rect\")\n                .attr(\"class\", perRunClass)\n                .attr(\"x\", 1)\n                .attr(\"transform\", function(d) { return \"translate(\" + xScaleBins(d.x0) + \",\" + yScaleBins(d.length) + \")\"; })\n                .attr(\"width\", function(d) { return xScaleBins(d.x1) - xScaleBins(d.x0) -1 ; })\n                .attr(\"height\", function(d) { return boundedHeight - yScaleBins(d.length); })\n                .style(\"fill\", \"#69b3a2\");\n     \n           /*\n        // Add the area\n        svg.append(\"path\")\n            .datum(bins)\n            .attr(\"class\", perRunClass)\n            .attr(\"fill\", \"#cce5df\")\n            .attr(\"stroke\", \"#69b3a2\")\n            .attr(\"stroke-width\", 4.5)\n            .attr(\"d\", d3.area()\n                .x(function(d) { return xScaleBins((d.x1 + d.x0) / 2) })\n                .y0(yScaleBins(0))\n                .y1(function(d) { return yScaleBins(d.length) })\n                );\n                                */\n\n    }\n\n    React.useEffect(() => {\n\n        const svgSelect = '#' + svgID;\n        const svg = d3.select(svgSelect)\n                      .append(\"g\")\n                      .attr(\"transform\", marginTranslate);\n\n        drawHistogram(svg);\n        // console.log('endvaluechart effect');\n    }, [props] );\n\n    return (\n        <div>\n            <svg id={svgID}  \n                width={totalWidth}\n                height={totalHeight} \n             >\n                <rect\n                    style={{ opacity:0 }}\n                    width={boundedWidth}\n                    height={boundedHeight}\n                    transform={marginTranslate}\n                    fill='LightGrey'\n                 >\n\n                </rect>\n            </svg>\n        </div>\n    );\n};\n\nexport default EndValueChart;\n"]},"metadata":{},"sourceType":"module"}