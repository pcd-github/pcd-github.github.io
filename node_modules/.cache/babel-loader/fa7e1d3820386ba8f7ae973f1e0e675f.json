{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/react-sample/resample/src/historical_data.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport XLSX from 'xlsx';\nimport { readFile } from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AnnualReturnData {\n  constructor(year, inflation_pct, stock_pct, bond_pct) {\n    this._year = year;\n    this._inf = inflation_pct;\n    this._stock = stock_pct;\n    this._bond = bond_pct;\n  }\n\n}\n\nconst histFile = \"./data/hist-returns.xlsx\";\nconst annualreturns = [];\n\nclass HistoricalData extends React.Component {\n  constructor() {\n    super();\n  }\n\n  initHistory() {\n    return readFile(histFile);\n  }\n\n}\n\nexport default HistoricalData; // demo code from \n// https://github.com/SheetJS/sheetjs/blob/master/demos/react/sheetjs.js\n\nfunction SheetJSApp() {\n  _s();\n\n  const [data, setData] = React.useState([]);\n  const [cols, setCols] = React.useState([]);\n\n  const handleFile = file => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      /* Parse data */\n      const ab = e.target.result;\n      const wb = XLSX.read(ab, {\n        type: 'array'\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      setData(data);\n      setCols(make_cols(ws['!ref']));\n    };\n\n    reader.readAsArrayBuffer(file);\n  };\n\n  const exportFile = () => {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropFile, {\n    handleFile: handleFile,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(DataInput, {\n          handleFile: handleFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !data.length,\n          className: \"btn btn-success\",\n          onClick: exportFile,\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-xs-12\",\n        children: /*#__PURE__*/_jsxDEV(OutTable, {\n          data: data,\n          cols: cols\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 2\n  }, this);\n}\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\n\n\n_s(SheetJSApp, \"mX9nkHc5f33NmLj9fZHZvwQpJl8=\");\n\n_c = SheetJSApp;\n\nfunction OutTable({\n  data,\n  cols\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-responsive\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: cols.map(c => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: c.name\n          }, c.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 27\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((r, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: cols.map(c => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: r[c.key]\n          }, c.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 22\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }, this);\n}\n\n_c2 = OutTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SheetJSApp\");\n$RefreshReg$(_c2, \"OutTable\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/react-sample/resample/src/historical_data.js"],"names":["React","XLSX","readFile","AnnualReturnData","constructor","year","inflation_pct","stock_pct","bond_pct","_year","_inf","_stock","_bond","histFile","annualreturns","HistoricalData","Component","initHistory","SheetJSApp","data","setData","useState","cols","setCols","handleFile","file","reader","FileReader","onload","e","ab","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","make_cols","readAsArrayBuffer","exportFile","aoa_to_sheet","book_new","book_append_sheet","writeFile","length","OutTable","map","c","name","key","r","i"],"mappings":"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","sourcesContent":["\nimport * as React from \"react\";\nimport XLSX from 'xlsx';\nimport { readFile } from 'xlsx';\n\nclass AnnualReturnData {\n\n    constructor (year, inflation_pct, stock_pct, bond_pct) {\n        this._year = year;\n        this._inf = inflation_pct;\n        this._stock = stock_pct;\n        this._bond = bond_pct;\n    }\n}\n\nconst histFile = \"./data/hist-returns.xlsx\";\nconst annualreturns = [];\n\nclass HistoricalData extends React.Component {\n\n    constructor() {\n        super();\n\n    }\n\n    initHistory () {\n       return (readFile(histFile));\n    }\n\n}\n\nexport default HistoricalData;\n\n// demo code from \n// https://github.com/SheetJS/sheetjs/blob/master/demos/react/sheetjs.js\n\nfunction SheetJSApp() {\n\tconst [data, setData] = React.useState([]);\n\tconst [cols, setCols] = React.useState([]);\n\n\tconst handleFile = (file) => {\n\t\tconst reader = new FileReader();\n\t\treader.onload = (e) => {\n\t\t\t/* Parse data */\n\t\t\tconst ab = e.target.result;\n\t\t\tconst wb = XLSX.read(ab, {type:'array'});\n\t\t\t/* Get first worksheet */\n\t\t\tconst wsname = wb.SheetNames[0];\n\t\t\tconst ws = wb.Sheets[wsname];\n\t\t\t/* Convert array of arrays */\n\t\t\tconst data = XLSX.utils.sheet_to_json(ws, {header:1});\n\t\t\t/* Update state */\n\t\t\tsetData(data);\n\t\t\tsetCols(make_cols(ws['!ref']))\n\t\t};\n\t\treader.readAsArrayBuffer(file);\n\t}\n\n\tconst exportFile = () => {\n\t\t/* convert state to workbook */\n\t\tconst ws = XLSX.utils.aoa_to_sheet(data);\n\t\tconst wb = XLSX.utils.book_new();\n\t\tXLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n\t\t/* generate XLSX file and send to client */\n\t\tXLSX.writeFile(wb, \"sheetjs.xlsx\")\n\t};\n\n\treturn (\n\t<DragDropFile handleFile={handleFile}>\n\t\t<div className=\"row\"><div className=\"col-xs-12\">\n\t\t\t<DataInput handleFile={handleFile} />\n\t\t</div></div>\n\t\t<div className=\"row\"><div className=\"col-xs-12\">\n\t\t\t<button disabled={!data.length} className=\"btn btn-success\" onClick={exportFile}>Export</button>\n\t\t</div></div>\n\t\t<div className=\"row\"><div className=\"col-xs-12\">\n\t\t\t<OutTable data={data} cols={cols} />\n\t\t</div></div>\n\t</DragDropFile>\n\t);\n}\n\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\nfunction OutTable({ data, cols }) {\n\treturn (\n\t\t<div className=\"table-responsive\">\n\t\t\t<table className=\"table table-striped\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>{cols.map((c) => <th key={c.key}>{c.name}</th>)}</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{data.map((r,i) => <tr key={i}>\n\t\t\t\t\t\t{cols.map(c => <td key={c.key}>{ r[c.key] }</td>)}\n\t\t\t\t\t</tr>)}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}