{"ast":null,"code":"var _jsxFileName = \"/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport * as d3 from \"d3\";\nimport './common.js';\nimport { getHighValueColorString, getLowValueColorString, getThresholdValues } from \"./common.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EndValueChart(props) {\n  _s();\n\n  const svgID = 'endvaluechartsvg';\n  const svgSelect = '#' + svgID;\n  const perRunClass = 'perrunevdata';\n  const histoBarClass = 'histobar';\n  const areaClass = 'areaclass';\n  const barGroupID = 'bargroup';\n  const pathGroupID = 'pathgroupid';\n  const margin = {\n    top: 40,\n    right: 65,\n    bottom: 40,\n    left: 65\n  };\n  const totalWidth = 960;\n  const totalHeight = 300;\n  const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n  const boundedWidth = totalWidth - margin.left - margin.right;\n  const boundedHeight = totalHeight - margin.top - margin.bottom;\n  const ttBinWrapID = 'ttevwrap';\n  const ttBinBackID = 'ttevback';\n  const ttBinRangeID = 'ttevrange';\n  const ttBinPctID = 'ttevpct';\n  const tooltipWidth = 75;\n  const tooltipHeight = 75;\n\n  const cleanupPrev = svg => {\n    const perRunSelect = '.' + perRunClass;\n    d3.selectAll(perRunSelect).remove();\n  };\n\n  const getXScaleForAxis = () => {\n    const thresholdValues = getCurrencyThresholds();\n    const numThresholds = thresholdValues.length;\n    var thresholdRange = [];\n    var thresholdInc = boundedWidth / (numThresholds + 1);\n\n    for (var i = 0; i <= thresholdValues.length; i++) {\n      thresholdRange[i] = i * thresholdInc;\n    }\n\n    return d3.scaleThreshold().domain(thresholdValues).range(thresholdRange);\n  };\n\n  const calcBinMetadata = data => {\n    const oneBinMetadata = {\n      'binData': data,\n      'extBin': d3.extent(data, d => d.adjEndCycleValue),\n      'extPctStartValue': d3.extent(data, d => d.pctOfStart),\n      'binCount': data.length\n    };\n    return oneBinMetadata;\n  };\n\n  const drawReferenceRects = (bins, parent, xScaleBins) => {\n    const lowValueColorString = getLowValueColorString();\n    const highValueColorString = getHighValueColorString();\n    const refRectOpacity = '0.25';\n    const xStart = xScaleBins(props.startvalue);\n    const width = xScaleBins(bins[0].x1) - xScaleBins(bins[0].x0); // startValue reference rect\n\n    parent.append('rect').attr('class', perRunClass).style('opacity', refRectOpacity).attr('x', xStart).attr('y', 0).attr('width', width).attr('height', boundedHeight); // failures and \n    // low end value reference rect\n\n    parent.append('rect').attr('class', perRunClass).style('opacity', refRectOpacity).attr('fill', lowValueColorString).attr('x', 0).attr('y', 0).attr('width', xStart).attr('height', boundedHeight); // high value reference rect\n\n    parent.append('rect').attr('class', perRunClass).style('opacity', refRectOpacity).attr('fill', highValueColorString).attr('x', xStart + width).attr('y', 0).attr('width', boundedWidth - xStart - width).attr('height', boundedHeight);\n  };\n\n  const drawReferenceLines = (bins, parent, xScaleBins) => {\n    const xCenterIncrement = (xScaleBins(bins[0].x1) - xScaleBins(bins[0].x0)) / 2;\n    const xForOne = xScaleBins(props.startvalue) + xCenterIncrement;\n    const textMargin = 15;\n    parent.append('line').attr('class', perRunClass).style('stroke', 'black').style('stroke-width', '1.5').style(\"stroke-dasharray\", \"3, 3, 5\").attr('x1', xForOne).attr('y1', boundedHeight).attr('x2', xForOne).attr('y2', 0);\n    parent.append('text').attr('class', perRunClass).attr('x', xForOne + textMargin).attr('y', textMargin).text('start value');\n    const xMedian = xScaleBins(props.medianendvalue) + xCenterIncrement;\n    parent.append('line').attr('class', perRunClass).style('stroke', 'black').style('stroke-width', '1.5').style(\"stroke-dasharray\", \"5, 5, 5, 3\").attr('x1', xMedian).attr('y1', boundedHeight).attr('x2', xMedian).attr('y2', 0);\n    parent.append('text').attr('class', perRunClass).attr('x', xMedian + textMargin).attr('y', textMargin * 2).text('median end value');\n  };\n\n  const getCurrencyThresholds = () => {\n    const pctThresholds = getThresholdValues();\n    const currencyThresholds = []; // create failure bin\n\n    currencyThresholds[0] = 0;\n    currencyThresholds[1] = 0.01; // start at index 1, as we've handled the zero case.  \n    // Consider removing zero from the common thresholds.\n    // for now, offset the first entry in the currency array to accomodate the failure bin.\n\n    for (var i = 1; i < pctThresholds.length; i++) {\n      currencyThresholds[i + 1] = pctThresholds[i] * props.startvalue;\n    }\n\n    return currencyThresholds;\n  };\n\n  const createBins = currencyThresholdValues => {\n    const binFunc = d3.bin().value(function (d) {\n      return d.adjEndCycleValue;\n    }).domain([currencyThresholdValues[0], currencyThresholdValues[currencyThresholdValues.length - 1]]).thresholds(currencyThresholdValues);\n    return binFunc(props.metadata);\n  };\n\n  const drawAreaChart = svg => {\n    const currencyThresholdValues = getCurrencyThresholds();\n    const bins = createBins(currencyThresholdValues);\n    const xScale = getXScaleForAxis(currencyThresholdValues);\n    const yScale = d3.scaleLinear().domain([0, d3.max(bins, function (d) {\n      return d.length;\n    })]).range([boundedHeight, 0]); // x/y axes\n\n    svg.append(\"g\").attr(\"class\", perRunClass).attr(\"transform\", \"translate(0,\" + boundedHeight + \")\").call(d3.axisBottom(xScale));\n    svg.append(\"g\").attr(\"class\", perRunClass).call(d3.axisLeft(yScale));\n    var pathGroup = svg.append('g').attr('class', perRunClass).attr('id', pathGroupID);\n    drawReferenceRects(bins, pathGroup, xScale);\n    drawReferenceLines(bins, pathGroup, xScale); // chart\n\n    pathGroup.append(\"path\").datum(bins).style('fill-opacity', '0.1').attr('class', perRunClass).attr(\"fill\", \"Grey\").attr(\"stroke\", 'Blue').attr(\"stroke-width\", 1.5).on('mouseover', handleMouseOver).on('mouseleave', handleMouseLeave).on('mousemove', handleMouseMove).attr(\"d\", d3.area().x(d => xScale(d.x0 + (d.x1 - d.x0) / 2)).y0(yScale(0)).y1(d => yScale(d.length)).curve(d3.curveBasis));\n  };\n\n  const prepTooltip = svg => {\n    // wrapper\n    // background\n    // text element\n    //  tspan for each line\n    //  x0, x1, % of start, % of results\n    const tooltipWrapper = svg.append('g').attr('id', ttBinWrapID).attr(\"class\", perRunClass).style('opacity', 0);\n    tooltipWrapper.append('rect').style('opacity', 0.70).attr('id', ttBinBackID).attr('width', tooltipWidth).attr('height', tooltipHeight).attr(\"pointer-events\", \"none\").attr(\"fill\", \"#e8e8e8\");\n    const tooltipText = tooltipWrapper.append('g').append('text').attr(\"pointer-events\", \"none\").attr('font-weight', 900).attr('text-anchor', 'left');\n    tooltipText.append('tspan').attr('id', ttBinRangeID).attr('x', '5').attr('y', '5').attr('dy', '15px').attr(\"pointer-events\", \"none\");\n    tooltipText.append('tspan').attr('id', ttBinPctID).attr('x', '5').attr('y', '5').attr('dy', '30px').attr(\"pointer-events\", \"none\");\n  };\n\n  const makeCurrency = num => {\n    let dollarUSLocale = Intl.NumberFormat('en-US', {\n      style: \"currency\",\n      currency: \"USD\"\n    });\n    return dollarUSLocale.format(num);\n  };\n\n  const makePct = num => {\n    return Number(num * 100).toFixed(2) + '%';\n  };\n\n  const getTooltip = () => {\n    return d3.select('#' + ttBinWrapID);\n  };\n\n  const getTooltipBackground = () => {\n    return d3.select('#' + ttBinBackID);\n  };\n\n  const getBinRangeSpan = () => {\n    return d3.select('#' + ttBinRangeID);\n  };\n\n  const getBinPctSpan = () => {\n    return d3.select('#' + ttBinPctID);\n  };\n\n  const handleMouseOver = e => {\n    getTooltip().style('opacity', 1);\n  };\n\n  const handleMouseMove = e => {\n    /*\n    const binData = e.srcElement.__data__;\n    const binMeta = calcBinMetadata(binData);\n    \n    // set the tt content\n    const rangeString = makeCurrency(+(binMeta.extBin[0])) + \n                        '-' + makeCurrency(+(binMeta.extBin[1]));\n    const binSizeString = ' ' + makePct(binData.length / props.metadata.length) +\n                          ' of cycles';\n    getBinRangeSpan().text(rangeString);\n    getBinPctSpan().text(binSizeString);\n    */\n    const bins = e.srcElement.__data__;\n    const xScale = getXScaleForAxis(currencyThresholdValues);\n    const bisect = d3.bisector(d => d.x0).left;\n    const coords = d3.pointer(e);\n    const x0 = xScale.invert(coords[0]);\n    const oneCycleData = allCycleDataState[0];\n    const i = bisect(oneCycleData, x0, 1);\n    const selectedData = oneCycleData[i];\n    const clientX = xScaleIn(selectedData.age);\n    var tooltipX = clientX; // place the tt\n\n    const tt = getTooltip();\n    const ttBounds = tt.node().getBBox();\n    getTooltipBackground().attr('width', ttBounds.width).attr('height', ttBounds.height);\n  };\n\n  const handleMouseLeave = () => {\n    getTooltip().style('opacity', 0);\n  };\n\n  React.useEffect(() => {\n    const svg = d3.select(svgSelect).append(\"g\").attr(\"transform\", marginTranslate);\n    cleanupPrev(svg); // drawHistogram(svg);\n\n    drawAreaChart(svg);\n    prepTooltip(svg);\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: svgID,\n      width: totalWidth,\n      height: totalHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EndValueChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = EndValueChart;\n;\nexport default EndValueChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"EndValueChart\");","map":{"version":3,"sources":["/Users/paul/OneDrive/Documents/code/src/swrve/src/endvaluechart.js"],"names":["React","d3","getHighValueColorString","getLowValueColorString","getThresholdValues","EndValueChart","props","svgID","svgSelect","perRunClass","histoBarClass","areaClass","barGroupID","pathGroupID","margin","top","right","bottom","left","totalWidth","totalHeight","marginTranslate","boundedWidth","boundedHeight","ttBinWrapID","ttBinBackID","ttBinRangeID","ttBinPctID","tooltipWidth","tooltipHeight","cleanupPrev","svg","perRunSelect","selectAll","remove","getXScaleForAxis","thresholdValues","getCurrencyThresholds","numThresholds","length","thresholdRange","thresholdInc","i","scaleThreshold","domain","range","calcBinMetadata","data","oneBinMetadata","extent","d","adjEndCycleValue","pctOfStart","drawReferenceRects","bins","parent","xScaleBins","lowValueColorString","highValueColorString","refRectOpacity","xStart","startvalue","width","x1","x0","append","attr","style","drawReferenceLines","xCenterIncrement","xForOne","textMargin","text","xMedian","medianendvalue","pctThresholds","currencyThresholds","createBins","currencyThresholdValues","binFunc","bin","value","thresholds","metadata","drawAreaChart","xScale","yScale","scaleLinear","max","call","axisBottom","axisLeft","pathGroup","datum","on","handleMouseOver","handleMouseLeave","handleMouseMove","area","x","y0","y1","curve","curveBasis","prepTooltip","tooltipWrapper","tooltipText","makeCurrency","num","dollarUSLocale","Intl","NumberFormat","currency","format","makePct","Number","toFixed","getTooltip","select","getTooltipBackground","getBinRangeSpan","getBinPctSpan","e","srcElement","__data__","bisect","bisector","coords","pointer","invert","oneCycleData","allCycleDataState","selectedData","clientX","xScaleIn","age","tooltipX","tt","ttBounds","node","getBBox","height","useEffect"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport * as d3 from \"d3\";\nimport './common.js';\nimport { getHighValueColorString, getLowValueColorString, getThresholdValues } from \"./common.js\";\n\nfunction EndValueChart (props) {\n\n    const svgID = 'endvaluechartsvg';\n    const svgSelect = '#' + svgID;\n    const perRunClass = 'perrunevdata';\n    const histoBarClass = 'histobar';\n    const areaClass = 'areaclass';\n    const barGroupID = 'bargroup';\n    const pathGroupID = 'pathgroupid';\n    const margin = { top: 40, right: 65, bottom: 40, left: 65 };\n    const totalWidth = 960;\n    const totalHeight = 300;\n    const marginTranslate = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n    const boundedWidth = totalWidth - margin.left - margin.right;\n    const boundedHeight = totalHeight - margin.top - margin.bottom;\n    const ttBinWrapID = 'ttevwrap';\n    const ttBinBackID = 'ttevback';\n    const ttBinRangeID = 'ttevrange';\n    const ttBinPctID = 'ttevpct';\n    const tooltipWidth = 75;\n    const tooltipHeight = 75;\n\n    const cleanupPrev = (svg) => {\n        const perRunSelect = '.' + perRunClass;\n        d3.selectAll(perRunSelect).remove();\n    }\n\n    const getXScaleForAxis = () => {\n        const thresholdValues = getCurrencyThresholds();\n        const numThresholds = thresholdValues.length;\n        var thresholdRange = [];\n        var thresholdInc = boundedWidth / (numThresholds + 1);\n\n        for (var i = 0; i <= thresholdValues.length; i++) {\n            thresholdRange[i] = i * thresholdInc;\n        }\n\n        return d3.scaleThreshold()\n                 .domain(thresholdValues)\n                 .range(thresholdRange);\n    }\n\n    const calcBinMetadata = (data) => {\n        const oneBinMetadata = {\n            'binData': data,\n            'extBin': d3.extent(data, (d) => d.adjEndCycleValue),\n            'extPctStartValue': d3.extent(data, (d) => d.pctOfStart),\n            'binCount': data.length,\n        }\n\n        return oneBinMetadata;\n    }\n\n    const drawReferenceRects = (bins, parent, xScaleBins) => {\n        const lowValueColorString = getLowValueColorString();\n        const highValueColorString = getHighValueColorString();\n        const refRectOpacity = '0.25';\n        const xStart = xScaleBins(props.startvalue);\n        const width = ((xScaleBins(bins[0].x1) - xScaleBins(bins[0].x0)));\n\n        // startValue reference rect\n        parent.append('rect')\n              .attr('class', perRunClass)\n              .style('opacity', refRectOpacity)\n              .attr('x', xStart)\n              .attr('y', 0)\n              .attr('width', width)\n              .attr('height', boundedHeight);\n        // failures and \n        // low end value reference rect\n        parent.append('rect')\n              .attr('class', perRunClass)\n              .style('opacity', refRectOpacity)\n              .attr('fill', lowValueColorString)\n              .attr('x', 0)\n              .attr('y', 0)\n              .attr('width', xStart)\n              .attr('height', boundedHeight);\n        // high value reference rect\n        parent.append('rect')\n              .attr('class', perRunClass)\n              .style('opacity', refRectOpacity)\n              .attr('fill', highValueColorString)\n              .attr('x', xStart + width)\n              .attr('y', 0)\n              .attr('width', boundedWidth - xStart - width)\n              .attr('height', boundedHeight);\n    }\n\n    const drawReferenceLines = (bins, parent, xScaleBins) => {\n\n        const xCenterIncrement = ((xScaleBins(bins[0].x1) - xScaleBins(bins[0].x0)) / 2)\n        const xForOne = xScaleBins(props.startvalue) + xCenterIncrement;\n        const textMargin = 15;\n\n        parent.append('line')\n              .attr('class', perRunClass)\n              .style('stroke', 'black')\n              .style('stroke-width', '1.5')\n              .style(\"stroke-dasharray\", (\"3, 3, 5\")) \n              .attr('x1', xForOne)\n              .attr('y1', boundedHeight)\n              .attr('x2', xForOne)\n              .attr('y2', 0);\n        parent.append('text')\n              .attr('class', perRunClass)\n              .attr('x', xForOne + textMargin)\n              .attr('y', textMargin)\n              .text('start value');\n        \n        const xMedian = xScaleBins(props.medianendvalue) + xCenterIncrement;\n\n        parent.append('line')\n              .attr('class', perRunClass)\n              .style('stroke', 'black')\n              .style('stroke-width', '1.5')\n              .style(\"stroke-dasharray\", (\"5, 5, 5, 3\")) \n              .attr('x1', xMedian)\n              .attr('y1', boundedHeight)\n              .attr('x2', xMedian)\n              .attr('y2', 0);\n        parent.append('text')\n              .attr('class', perRunClass)\n              .attr('x', xMedian + textMargin)\n              .attr('y', textMargin * 2)\n              .text('median end value');\n    }\n\n    const getCurrencyThresholds = () => {\n        const pctThresholds = getThresholdValues();\n        const currencyThresholds = [];\n\n        // create failure bin\n        currencyThresholds[0] = 0;\n        currencyThresholds[1] = 0.01;\n        // start at index 1, as we've handled the zero case.  \n        // Consider removing zero from the common thresholds.\n        // for now, offset the first entry in the currency array to accomodate the failure bin.\n        for (var i = 1; i < pctThresholds.length; i++) {\n            currencyThresholds[i+1] = pctThresholds[i] * props.startvalue;\n        }\n        return currencyThresholds;\n    }\n\n    const createBins = (currencyThresholdValues) => {\n\n        const binFunc = d3.bin()\n                          .value(function(d) { return d.adjEndCycleValue; })   \n                          .domain([currencyThresholdValues[0], \n                                   currencyThresholdValues[currencyThresholdValues.length - 1]])\n                          .thresholds(currencyThresholdValues); \n\n        return binFunc(props.metadata);\n    }\n\n    const drawAreaChart = (svg) => {\n        const currencyThresholdValues = getCurrencyThresholds();\n        const bins = createBins(currencyThresholdValues);        \n        const xScale = getXScaleForAxis(currencyThresholdValues);\n        const yScale = d3.scaleLinear()\n                         .domain([0, d3.max(bins, function(d) { return d.length; })])\n                         .range([boundedHeight, 0]);\n\n        // x/y axes\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .attr(\"transform\", \"translate(0,\" + boundedHeight + \")\")\n            .call(d3.axisBottom(xScale));\n        svg.append(\"g\")\n            .attr(\"class\", perRunClass)\n            .call(d3.axisLeft(yScale));\n             \n        var pathGroup = svg.append('g')\n                           .attr('class', perRunClass)\n                           .attr('id', pathGroupID);\n\n        drawReferenceRects(bins, pathGroup, xScale);   \n        drawReferenceLines(bins, pathGroup, xScale); \n\n        // chart\n        pathGroup.append(\"path\")\n                    .datum(bins)\n                    .style('fill-opacity', '0.1')\n                    .attr('class', perRunClass)\n                    .attr(\"fill\", \"Grey\")\n                    .attr(\"stroke\", 'Blue')\n                    .attr(\"stroke-width\", 1.5)\n                    .on('mouseover', handleMouseOver)\n                    .on('mouseleave', handleMouseLeave)\n                    .on('mousemove', handleMouseMove)\n                    .attr(\"d\", d3.area()\n                        .x(d => xScale(d.x0 + ((d.x1-d.x0) / 2)))\n                        .y0(yScale(0))\n                        .y1(d => yScale(d.length))\n                        .curve(d3.curveBasis)\n                );  \n                        \n    }\n\n    const prepTooltip = (svg) => {\n        // wrapper\n        // background\n        // text element\n        //  tspan for each line\n        //  x0, x1, % of start, % of results\n\n        const tooltipWrapper = svg.append('g')\n                                  .attr('id', ttBinWrapID)\n                                  .attr(\"class\", perRunClass)\n                                  .style('opacity', 0);\n        tooltipWrapper.append('rect')\n                      .style('opacity', 0.70)\n                      .attr('id', ttBinBackID)\n                      .attr('width', tooltipWidth)\n                      .attr('height', tooltipHeight)\n                      .attr(\"pointer-events\", \"none\")\n                      .attr(\"fill\", \"#e8e8e8\"); \n\n        const tooltipText = tooltipWrapper.append('g').append('text')\n                                          .attr(\"pointer-events\", \"none\")\n                                          .attr('font-weight', 900)\n                                          .attr('text-anchor', 'left');\n        tooltipText.append('tspan')\n                   .attr('id', ttBinRangeID)\n                   .attr('x', '5')\n                   .attr('y', '5')\n                   .attr('dy', '15px')\n                   .attr(\"pointer-events\", \"none\");\n        tooltipText.append('tspan')\n                   .attr('id', ttBinPctID)\n                   .attr('x', '5')\n                   .attr('y', '5')\n                   .attr('dy', '30px')\n                   .attr(\"pointer-events\", \"none\");\n    }\n\n    const makeCurrency = (num) => {\n        let dollarUSLocale = Intl.NumberFormat('en-US', {\n            style: \"currency\",\n            currency: \"USD\",\n        });\n        return dollarUSLocale.format(num);\n    }\n\n    const makePct = (num) => {\n        return Number( num * 100).toFixed(2) + '%';\n    }\n\n    const getTooltip = () => {\n        return d3.select('#' + ttBinWrapID);\n    }\n\n    const getTooltipBackground = () => {\n        return d3.select('#' + ttBinBackID);\n    }\n\n    const getBinRangeSpan = () => {\n        return d3.select('#' + ttBinRangeID);\n    }\n\n    const getBinPctSpan = () => {\n        return d3.select('#' + ttBinPctID);\n    }\n\n    const handleMouseOver = (e) => {\n        getTooltip().style('opacity', 1);\n    }\n\n    const handleMouseMove = (e) => {\n        /*\n        const binData = e.srcElement.__data__;\n        const binMeta = calcBinMetadata(binData);\n        \n        // set the tt content\n        const rangeString = makeCurrency(+(binMeta.extBin[0])) + \n                            '-' + makeCurrency(+(binMeta.extBin[1]));\n        const binSizeString = ' ' + makePct(binData.length / props.metadata.length) +\n                              ' of cycles';\n        getBinRangeSpan().text(rangeString);\n        getBinPctSpan().text(binSizeString);\n        */\n        const bins = e.srcElement.__data__;\n        const xScale = getXScaleForAxis(currencyThresholdValues);\n\n        const bisect = d3.bisector((d) => d.x0).left;\n        const coords = d3.pointer(e);\n        const x0 = xScale.invert(coords[0]);\n        const oneCycleData = allCycleDataState[0];\n        const i = bisect(oneCycleData, x0, 1);\n        const selectedData = oneCycleData[i];\n        const clientX = xScaleIn(selectedData.age);\n        var tooltipX = clientX;\n\n\n        // place the tt\n        const tt = getTooltip();\n        const ttBounds = tt.node().getBBox();\n        getTooltipBackground()                \n            .attr('width', ttBounds.width)\n            .attr('height', ttBounds.height);\n    };\n    \n    const handleMouseLeave = () => {\n        getTooltip().style('opacity', 0);\n    };\n\n    React.useEffect(() => {\n\n        const svg = d3.select(svgSelect)\n                      .append(\"g\")\n                      .attr(\"transform\", marginTranslate);\n\n        cleanupPrev(svg);\n        // drawHistogram(svg);\n        drawAreaChart(svg);\n        prepTooltip(svg);\n    }, [props] );\n\n    return (\n        <div>\n            <svg id={svgID}  \n                width={totalWidth}\n                height={totalHeight} \n             >\n            </svg>\n        </div>\n    );\n};\n\nexport default EndValueChart;\n"]},"metadata":{},"sourceType":"module"}